{"version":3,"sources":["../../src/mmas/Ant.js"],"names":["Ant","graph","params","_graph","_alpha","alpha","_beta","beta","_q","q","_maxDistance","maxDistance","_tour","_currentVertex","getVertex","addVertex","init","rouletteWheel","vertices","getVertices","vertexProbabilities","finalPheromoneWeight","forwardMovePossible","timeSpendAtAttraction","vertexIndex","vertex","edgeForwardDistance","getEdge","getLast","getDistance","edgeHomeDistance","contains","distance","edge","getPheromone","Math","pow","wheelTarget","random","wheelPosition","isEqual","getTour","reset","tourFound","makeNextMove","weight","fromVertex","toVertex","pheromone","undefined","extraPheromone","tourIndex","size","get","setPheromone"],"mappings":"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","file":"Ant.js","sourcesContent":["import Tour from './Tour';\n\nclass Ant {\n  constructor(graph, params) {\n    this._graph = graph;\n\n    this._alpha = params.alpha;\n    this._beta = params.beta;\n    this._q = params.q;\n    this._maxDistance = params.maxDistance;\n    this._tour = null;\n  }\n\n  reset() {\n    this._tour = null;\n  }\n\n  init() {\n    this._tour = new Tour(this._graph);\n    this._currentVertex = this._graph.getVertex(0);\n    this._tour.addVertex(this._currentVertex);\n  }\n\n  getTour() {\n    return this._tour;\n  }\n\n  makeNextMove() {\n    if (this._tour == null) {\n      this.init();\n    }\n\n    let rouletteWheel = 0.0;\n    const vertices = this._graph.getVertices();\n\n    let vertexProbabilities = [];\n    let finalPheromoneWeight;\n    let forwardMovePossible = false;\n\n    let timeSpendAtAttraction = 2500; // 30 mins\n\n    for (var vertexIndex in vertices) {\n      const vertex = vertices[vertexIndex];\n      const edgeForwardDistance = this._graph.getEdge(this._tour.getLast(), vertex).getDistance();\n      const edgeHomeDistance = this._graph.getEdge(vertex, vertices[0]).getDistance();\n\n      if ((!this._tour.contains(vertices[vertexIndex]) &&\n          (this._maxDistance >= timeSpendAtAttraction + this._tour.distance() + edgeForwardDistance + edgeHomeDistance))) {\n\n        let edge = this._graph.getEdge(this._currentVertex, vertices[vertexIndex]);\n        if (this._alpha == 1) {\n          finalPheromoneWeight = edge.getPheromone();\n        } else {\n          finalPheromoneWeight = Math.pow(edge.getPheromone(), this._alpha);\n        }\n        vertexProbabilities[vertexIndex] = finalPheromoneWeight *\n            Math.pow(1.0 / edge.getDistance(), this._beta);\n        rouletteWheel += vertexProbabilities[vertexIndex];\n        forwardMovePossible = true;\n      }\n    }\n\n    if (forwardMovePossible) {\n      const wheelTarget = rouletteWheel * Math.random();\n\n      let wheelPosition = 0.0;\n      for (var vertexIndex in vertices) {\n        const vertex = vertices[vertexIndex];\n        const edgeForwardDistance = this._graph.getEdge(this._tour.getLast(), vertex).getDistance();\n        const edgeHomeDistance = this._graph.getEdge(vertex, vertices[0]).getDistance();\n\n        if ((!this._tour.contains(vertices[vertexIndex]) &&\n            (this._maxDistance >= timeSpendAtAttraction + this._tour.distance() + edgeForwardDistance + edgeHomeDistance))) {\n\n          wheelPosition += vertexProbabilities[vertexIndex];\n          if (wheelPosition >= wheelTarget) {\n            this._currentVertex = vertices[vertexIndex];\n            this._tour.addVertex(vertices[vertexIndex]);\n            return;\n          }\n        }\n      }\n    } else {\n      this._currentVertex = vertices[0];\n      this._tour.addVertex(vertices[0]);\n    }\n  }\n\n  tourFound() {\n    if (this._tour == null) {\n      return false;\n    }\n\n    return this._graph.getVertices()[0].isEqual(this.getTour().getLast());\n  }\n\n  run() {\n    this.reset();\n    while (!this.tourFound()) {\n      this.makeNextMove();\n    }\n  }\n\n  addPheromone(weight) {\n    let fromVertex, toVertex, edge, pheromone;\n\n    if (weight == undefined) {\n      weight = 1;\n    }\n\n    const extraPheromone = (this._q * weight) / this._tour.distance();\n    for (var tourIndex = 0; tourIndex < this._tour.size(); tourIndex++) {\n      if (tourIndex >= this._tour.size() - 1) {\n        fromVertex = this._tour.get(tourIndex);\n        toVertex = this._tour.get(0);\n        edge = this._graph.getEdge(fromVertex, toVertex);\n        pheromone = edge.getPheromone();\n        edge.setPheromone(pheromone + extraPheromone);\n      } else {\n        fromVertex = this._tour.get(tourIndex);\n        toVertex = this._tour.get(tourIndex + 1);\n        edge = this._graph.getEdge(fromVertex, toVertex);\n        pheromone = edge.getPheromone();\n        edge.setPheromone(pheromone + extraPheromone);\n      }\n    }\n  }\n}\n\nexport default Ant;"]}