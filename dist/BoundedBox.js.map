{"version":3,"sources":["../src/BoundedBox.js"],"names":["BoundedBox","nw","se","a","longitude","w","latitude","n","b","e","s","Math","round","unit","verticalA","verticalB","horizontalA","horizontalB","vertical","horizontal","waypoints","minLat","minLon","maxLat","maxLon","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","forEach","waypoint"],"mappings":";;;;;;;;;;AAAA;;;;;;;;IAEMA,U;AACJ,sBAAYC,EAAZ,EAAgBC,EAAhB,EAAoB;AAAA;;AAClB,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,EAAL,GAAUA,EAAV;AACD;;;;wBAEO;AACN,aAAO,KAAKD,EAAL,CAAQ,CAAR,CAAP;AACD;;;wBAEO;AACN,aAAO,KAAKA,EAAL,CAAQ,CAAR,CAAP;AACD;;;wBAEO;AACN,aAAO,KAAKC,EAAL,CAAQ,CAAR,CAAP;AACD;;;wBAEO;AACN,aAAO,KAAKA,EAAL,CAAQ,CAAR,CAAP;AACD;;;wBAEuB;AACtB,UAAMC,IAAI,EAACC,WAAW,KAAKC,CAAjB,EAAoBC,UAAU,KAAKC,CAAnC,EAAV;AACA,UAAMC,IAAI,EAACJ,WAAW,KAAKK,CAAjB,EAAoBH,UAAU,KAAKI,CAAnC,EAAV;AACA,aAAOC,KAAKC,KAAL,CAAW,yBAAUT,CAAV,EAAaK,CAAb,EAAgB,EAACK,MAAM,OAAP,EAAhB,CAAX,CAAP;AACD;;;wBAEU;AACT,UAAMC,YAAY,EAACV,WAAW,KAAKK,CAAjB,EAAoBH,UAAU,KAAKC,CAAnC,EAAlB;AACA,UAAMQ,YAAY,EAACX,WAAW,KAAKK,CAAjB,EAAoBH,UAAU,KAAKI,CAAnC,EAAlB;AACA,UAAMM,cAAc,EAACZ,WAAW,KAAKK,CAAjB,EAAoBH,UAAU,KAAKC,CAAnC,EAApB;AACA,UAAMU,cAAc,EAACb,WAAW,KAAKC,CAAjB,EAAoBC,UAAU,KAAKC,CAAnC,EAApB;AACA,UAAMW,WAAW,yBAAUJ,SAAV,EAAqBC,SAArB,EAAgC,EAACF,MAAM,OAAP,EAAhC,CAAjB;AACA,UAAMM,aAAa,yBAAUH,WAAV,EAAuBC,WAAvB,EAAoC,EAACJ,MAAM,OAAP,EAApC,CAAnB;AACA,aAAOF,KAAKC,KAAL,CAAYM,WAAWC,UAAZ,GAA0B,OAArC,CAAP;AACD;;;0CAE4BC,S,EAAW;AACtC,UAAIC,eAAJ;AAAA,UAAYC,eAAZ;AAAA,UAAoBC,eAApB;AAAA,UAA4BC,eAA5B;AACAH,eAASC,SAASG,OAAOC,gBAAzB;AACAH,eAASC,SAASC,OAAOE,gBAAzB;;AAEAP,gBAAUQ,OAAV,CAAkB,oBAAY;AAAA,uCACEC,QADF;AAAA,YACrBzB,SADqB;AAAA,YACVE,QADU;;AAE5B,YAAIA,WAAWe,MAAf,EAAuBA,SAASf,QAAT;AACvB,YAAIA,WAAWiB,MAAf,EAAuBA,SAASjB,QAAT;AACvB,YAAIF,YAAYkB,MAAhB,EAAwBA,SAASlB,SAAT;AACxB,YAAIA,YAAYoB,MAAhB,EAAwBA,SAASpB,SAAT;AACzB,OAND;;AAQA,aAAO,IAAIJ,UAAJ,CAAe,CAACsB,MAAD,EAASC,MAAT,CAAf,EAAiC,CAACC,MAAD,EAASH,MAAT,CAAjC,CAAP;AACD;;;;;;kBAGYrB,U","file":"BoundedBox.js","sourcesContent":["import haversine from 'haversine';\n\nclass BoundedBox {\n  constructor(nw, se) {\n    this.nw = nw;\n    this.se = se;\n  }\n\n  get n() {\n    return this.nw[1];\n  }\n\n  get w() {\n    return this.nw[0];\n  }\n\n  get s() {\n    return this.se[1];\n  }\n\n  get e() {\n    return this.se[0];\n  }\n\n  get haversineDistance() {\n    const a = {longitude: this.w, latitude: this.n};\n    const b = {longitude: this.e, latitude: this.s};\n    return Math.round(haversine(a, b, {unit: 'meter'}));\n  }\n\n  get area() {\n    const verticalA = {longitude: this.e, latitude: this.n};\n    const verticalB = {longitude: this.e, latitude: this.s};\n    const horizontalA = {longitude: this.e, latitude: this.n};\n    const horizontalB = {longitude: this.w, latitude: this.n};\n    const vertical = haversine(verticalA, verticalB, {unit: 'meter'});\n    const horizontal = haversine(horizontalA, horizontalB, {unit: 'meter'});\n    return Math.round((vertical * horizontal) / 1000000);\n  }\n\n  static generateFromWaypoints(waypoints) {\n    let minLat, minLon, maxLat, maxLon;\n    minLat = minLon = Number.MAX_SAFE_INTEGER;\n    maxLat = maxLon = Number.MIN_SAFE_INTEGER;\n\n    waypoints.forEach(waypoint => {\n      const [longitude, latitude] = waypoint;\n      if (latitude < minLat) minLat = latitude;\n      if (latitude > maxLat) maxLat = latitude;\n      if (longitude < minLon) minLon = longitude;\n      if (longitude > maxLon) maxLon = longitude;\n    });\n\n    return new BoundedBox([minLon, maxLat], [maxLon, minLat]);\n  }\n}\n\nexport default BoundedBox;"]}