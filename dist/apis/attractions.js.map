{"version":3,"sources":["../../src/apis/attractions.js"],"names":["AttractionsAPI","geocode","flickr","lonelyPlanetAPI","geocodeAPI","flickrAPI","query","Promise","console","log","city","then","sights","_getLocations","_getPopularity","resolve","addresses","map","sight","result","forEach","i","geocodes","status","location","results","push","photos","lat","lon","text","all","populaties","data","index","Object","assign","popularity","parseInt"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEMA,c;AACJ,gCAA+B;AAAA,QAAlBC,OAAkB,QAAlBA,OAAkB;AAAA,QAATC,MAAS,QAATA,MAAS;;AAAA;;AAC7B,SAAKC,eAAL,GAAuB,4BAAvB;AACA,SAAKC,UAAL,GAAkB,sBAAeH,OAAf,CAAlB;AACA,SAAKI,SAAL,GAAiB,qBAAcH,MAAd,CAAjB;AACD;;;;0BAEKI,M,EAAO;AAAA;;AACX,aAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5BC,gBAAQC,GAAR,CAAY,eAAZ;AACA,cAAKN,eAAL,CAAqBO,IAArB,CAA0BJ,MAA1B,EAAiCK,IAAjC,CAAsC,gBAAQ;AAC5CH,kBAAQC,GAAR,CAAY,iBAAZ;AACA,iBAAOC,KAAKE,MAAL,EAAP;AACD,SAHD,EAGGD,IAHH,CAGQ,kBAAU;AAChBH,kBAAQC,GAAR,CAAY,4BAAZ;AACA,iBAAO,MAAKI,aAAL,CAAmBD,MAAnB,CAAP;AACD,SAND,EAMGD,IANH,CAMQ,kBAAU;AAChBH,kBAAQC,GAAR,CAAY,2BAAZ;AACA,iBAAO,MAAKK,cAAL,CAAoBF,MAApB,CAAP;AACD,SATD,EASGD,IATH,CASQ,kBAAU;AAChBI,kBAAQH,MAAR;AACD,SAXD;AAYD,OAdM,CAAP;AAeD;;;kCAEaA,M,EAAQ;AAAA;;AACpB,UAAMI,YAAYJ,OAAOK,GAAP,CAAW;AAAA,eACtBC,MAAM,MAAN,EAAc,SAAd,CADsB,SACMA,MAAM,MAAN,EAAc,MAAd,CADN,SAC+BA,MAAM,MAAN,CAD/B;AAAA,OAAX,CAAlB;;AAIA,aAAO,IAAIX,OAAJ,CAAY,mBAAW;AAC5B,eAAKH,UAAL,CAAgBE,KAAhB,CAAsBU,SAAtB,EAAiCL,IAAjC,CAAsC,oBAAY;AAChD,cAAIQ,SAAS,EAAb;;AAEAP,iBAAOQ,OAAP,CAAe,UAACF,KAAD,EAAQG,CAAR,EAAc;AAC3B,gBAAMpB,UAAUqB,SAASD,CAAT,CAAhB;AACA,gBAAIpB,QAAQsB,MAAR,IAAkB,IAAtB,EAA4B;AAC1BL,oBAAMM,QAAN,GAAiBvB,QAAQwB,OAAR,CAAgB,CAAhB,EAAmB,UAAnB,EAA+B,UAA/B,CAAjB;AACAN,qBAAOO,IAAP,CAAYR,KAAZ;AACD;AACF,WAND;;AAQAH,kBAAQI,MAAR;AACD,SAZD;AAaD,OAdM,CAAP;AAeD;;;mCAEcP,M,EAAQ;AAAA;;AACrB,UAAMe,SAASf,OAAOK,GAAP,CAAW;AAAA,eACtB,OAAKZ,SAAL,CAAeC,KAAf,CAAqB,eAArB,EAAsC;AACpCsB,eAAKV,MAAM,KAAN,CAD+B;AAEpCW,eAAKX,MAAM,KAAN,CAF+B;AAGpCY,gBAAMZ,MAAM,MAAN;AAH8B,SAAtC,CADsB;AAAA,OAAX,CAAf;;AAQA,aAAO,IAAIX,OAAJ,CAAY,mBAAW;AAC5BA,gBAAQwB,GAAR,CAAYJ,MAAZ,EAAoBhB,IAApB,CAAyB,gBAAQ;AAC/B,cAAIqB,aAAaC,KAAKhB,GAAL,CAAS,kBAAU;AAClC,mBAAOU,OAAO,QAAP,EAAiB,OAAjB,CAAP;AACD,WAFgB,CAAjB;;AAIAZ,kBAAQH,OAAOK,GAAP,CAAW,UAACC,KAAD,EAAQgB,KAAR,EAAkB;AACnC,mBAAOC,OAAOC,MAAP,CAAclB,KAAd,EAAqB,EAACmB,YAAYC,SAASN,WAAWE,KAAX,CAAT,IAA8B,GAA3C,EAArB,CAAP;AACD,WAFO,CAAR;AAGD,SARD;AASD,OAVM,CAAP;AAWD;;;;;;kBAGYlC,c","file":"attractions.js","sourcesContent":["import LonelyPlanetAPI from './lonelyplanet';\r\nimport GeocodeAPI from './geocode';\r\nimport FlickrAPI from './flickr';\r\n\r\nclass AttractionsAPI {\r\n  constructor({geocode, flickr}) {\r\n    this.lonelyPlanetAPI = new LonelyPlanetAPI();\r\n    this.geocodeAPI = new GeocodeAPI(geocode);\r\n    this.flickrAPI = new FlickrAPI(flickr);\r\n  }\r\n\r\n  query(query) {\r\n    return new Promise(resolve => {\r\n      console.log('fetching city');\r\n      this.lonelyPlanetAPI.city(query).then(city => {\r\n        console.log('fetching sights');\r\n        return city.sights();\r\n      }).then(sights => {\r\n        console.log('fetching sight coordinates');\r\n        return this._getLocations(sights);\r\n      }).then(sights => {\r\n        console.log('fetching sight popularity');\r\n        return this._getPopularity(sights);\r\n      }).then(sights => {\r\n        resolve(sights)\r\n      });\r\n    });\r\n  }\r\n\r\n  _getLocations(sights) {\r\n    const addresses = sights.map(sight => (\r\n        `${sight['city']['country']} ${sight['city']['city']} ${sight['name']}`\r\n    ));\r\n\r\n    return new Promise(resolve => {\r\n      this.geocodeAPI.query(addresses).then(geocodes => {\r\n        let result = [];\r\n\r\n        sights.forEach((sight, i) => {\r\n          const geocode = geocodes[i];\r\n          if (geocode.status == 'OK') {\r\n            sight.location = geocode.results[0]['geometry']['location'];\r\n            result.push(sight);\r\n          }\r\n        });\r\n\r\n        resolve(result);\r\n      });\r\n    });\r\n  };\r\n\r\n  _getPopularity(sights) {\r\n    const photos = sights.map(sight => (\r\n        this.flickrAPI.query('photos.search', {\r\n          lat: sight['lat'],\r\n          lon: sight['lng'],\r\n          text: sight['name'],\r\n        })\r\n    ));\r\n\r\n    return new Promise(resolve => {\r\n      Promise.all(photos).then(data => {\r\n        let populaties = data.map(photos => {\r\n          return photos['photos']['total'];\r\n        });\r\n\r\n        resolve(sights.map((sight, index) => {\r\n          return Object.assign(sight, {popularity: parseInt(populaties[index]) + 100});\r\n        }));\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default AttractionsAPI;"]}