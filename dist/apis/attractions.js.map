{"version":3,"sources":["../../src/apis/attractions.js"],"names":["AttractionsAPI","geocode","flickr","lonelyPlanetAPI","geocodeAPI","flickrAPI","query","Promise","console","log","city","then","sights","_getLocations","_getPopularity","resolve","addresses","map","sight","result","forEach","i","geocodes","status","location","results","push","photos","lat","lon","text","all","populaties","data","index","Object","assign","popularity","parseInt"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEMA,c;AACJ,gCAA+B;AAAA,QAAlBC,OAAkB,QAAlBA,OAAkB;AAAA,QAATC,MAAS,QAATA,MAAS;;AAAA;;AAC7B,SAAKC,eAAL,GAAuB,4BAAvB;AACA,SAAKC,UAAL,GAAkB,sBAAeH,OAAf,CAAlB;AACA,SAAKI,SAAL,GAAiB,qBAAcH,MAAd,CAAjB;AACD;;;;0BAEKI,M,EAAO;AAAA;;AACX,aAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5BC,gBAAQC,GAAR,CAAY,eAAZ;AACA,cAAKN,eAAL,CAAqBO,IAArB,CAA0BJ,MAA1B,EAAiCK,IAAjC,CAAsC,gBAAQ;AAC5CH,kBAAQC,GAAR,CAAY,iBAAZ;AACA,iBAAOC,KAAKE,MAAL,EAAP;AACD,SAHD,EAGGD,IAHH,CAGQ,kBAAU;AAChBH,kBAAQC,GAAR,CAAY,4BAAZ;AACA,iBAAO,MAAKI,aAAL,CAAmBD,MAAnB,CAAP;AACD,SAND,EAMGD,IANH,CAMQ,kBAAU;AAChBH,kBAAQC,GAAR,CAAY,2BAAZ;AACA,iBAAO,MAAKK,cAAL,CAAoBF,MAApB,CAAP;AACD,SATD,EASGD,IATH,CASQ,kBAAU;AAChBI,kBAAQH,MAAR;AACD,SAXD;AAYD,OAdM,CAAP;AAeD;;;kCAEaA,M,EAAQ;AAAA;;AACpB,UAAMI,YAAYJ,OAAOK,GAAP,CAAW;AAAA,eACtBC,MAAM,MAAN,EAAc,SAAd,CADsB,SACMA,MAAM,MAAN,EAAc,MAAd,CADN,SAC+BA,MAAM,MAAN,CAD/B;AAAA,OAAX,CAAlB;;AAIA,aAAO,IAAIX,OAAJ,CAAY,mBAAW;AAC5B,eAAKH,UAAL,CAAgBE,KAAhB,CAAsBU,SAAtB,EAAiCL,IAAjC,CAAsC,oBAAY;AAChD,cAAIQ,SAAS,EAAb;;AAEAP,iBAAOQ,OAAP,CAAe,UAACF,KAAD,EAAQG,CAAR,EAAc;AAC3B,gBAAMpB,UAAUqB,SAASD,CAAT,CAAhB;AACA,gBAAIpB,QAAQsB,MAAR,IAAkB,IAAtB,EAA4B;AAC1BL,oBAAMM,QAAN,GAAiBvB,QAAQwB,OAAR,CAAgB,CAAhB,EAAmB,UAAnB,EAA+B,UAA/B,CAAjB;AACAN,qBAAOO,IAAP,CAAYR,KAAZ;AACD;AACF,WAND;;AAQAH,kBAAQI,MAAR;AACD,SAZD;AAaD,OAdM,CAAP;AAeD;;;mCAEcP,M,EAAQ;AAAA;;AACrB,UAAMe,SAASf,OAAOK,GAAP,CAAW;AAAA,eACtB,OAAKZ,SAAL,CAAeC,KAAf,CAAqB,eAArB,EAAsC;AACpCsB,eAAKV,MAAM,KAAN,CAD+B;AAEpCW,eAAKX,MAAM,KAAN,CAF+B;AAGpCY,gBAAMZ,MAAM,MAAN;AAH8B,SAAtC,CADsB;AAAA,OAAX,CAAf;;AAQA,aAAO,IAAIX,OAAJ,CAAY,mBAAW;AAC5BA,gBAAQwB,GAAR,CAAYJ,MAAZ,EAAoBhB,IAApB,CAAyB,gBAAQ;AAC/B,cAAIqB,aAAaC,KAAKhB,GAAL,CAAS,kBAAU;AAClC,mBAAOU,OAAO,QAAP,EAAiB,OAAjB,CAAP;AACD,WAFgB,CAAjB;;AAIAZ,kBAAQH,OAAOK,GAAP,CAAW,UAACC,KAAD,EAAQgB,KAAR,EAAkB;AACnC,mBAAOC,OAAOC,MAAP,CAAclB,KAAd,EAAqB,EAACmB,YAAYC,SAASN,WAAWE,KAAX,CAAT,IAA8B,GAA3C,EAArB,CAAP;AACD,WAFO,CAAR;AAGD,SARD;AASD,OAVM,CAAP;AAWD;;;;;;kBAGYlC,c","file":"attractions.js","sourcesContent":["import LonelyPlanetAPI from './lonelyplanet';\nimport GeocodeAPI from './geocode';\nimport FlickrAPI from './flickr';\n\nclass AttractionsAPI {\n  constructor({geocode, flickr}) {\n    this.lonelyPlanetAPI = new LonelyPlanetAPI();\n    this.geocodeAPI = new GeocodeAPI(geocode);\n    this.flickrAPI = new FlickrAPI(flickr);\n  }\n\n  query(query) {\n    return new Promise(resolve => {\n      console.log('fetching city');\n      this.lonelyPlanetAPI.city(query).then(city => {\n        console.log('fetching sights');\n        return city.sights();\n      }).then(sights => {\n        console.log('fetching sight coordinates');\n        return this._getLocations(sights);\n      }).then(sights => {\n        console.log('fetching sight popularity');\n        return this._getPopularity(sights);\n      }).then(sights => {\n        resolve(sights)\n      });\n    });\n  }\n\n  _getLocations(sights) {\n    const addresses = sights.map(sight => (\n        `${sight['city']['country']} ${sight['city']['city']} ${sight['name']}`\n    ));\n\n    return new Promise(resolve => {\n      this.geocodeAPI.query(addresses).then(geocodes => {\n        let result = [];\n\n        sights.forEach((sight, i) => {\n          const geocode = geocodes[i];\n          if (geocode.status == 'OK') {\n            sight.location = geocode.results[0]['geometry']['location'];\n            result.push(sight);\n          }\n        });\n\n        resolve(result);\n      });\n    });\n  };\n\n  _getPopularity(sights) {\n    const photos = sights.map(sight => (\n        this.flickrAPI.query('photos.search', {\n          lat: sight['lat'],\n          lon: sight['lng'],\n          text: sight['name'],\n        })\n    ));\n\n    return new Promise(resolve => {\n      Promise.all(photos).then(data => {\n        let populaties = data.map(photos => {\n          return photos['photos']['total'];\n        });\n\n        resolve(sights.map((sight, index) => {\n          return Object.assign(sight, {popularity: parseInt(populaties[index]) + 100});\n        }));\n      });\n    });\n  }\n}\n\nexport default AttractionsAPI;"]}