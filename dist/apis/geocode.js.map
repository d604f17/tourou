{"version":3,"sources":["../../src/apis/geocode.js"],"names":["GeocodeAPI","key","url","address","resolve","parameters","stringify","json","then","result","constructor","Array","_request","addressRequests","map","request","delay","concurrency"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEMA,U;AACJ,sBAAYC,GAAZ,EAAiB;AAAA;;AACf,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAW,mDAAX;AACD;;;;6BAEQC,O,EAAS;AAAA;;AAChB,aAAO,uBAAY,UAACC,OAAD,EAAa;AAC9B,YAAMC,aAAa,aAAGC,SAAH,CAAa;AAC9BH,0BAD8B;AAE9BF,eAAK,MAAKA;AAFoB,SAAb,CAAnB;;AAKA,sCAAG,EAACC,KAAK,MAAKA,GAAL,GAAW,GAAX,GAAiBG,UAAvB,EAAmCE,MAAM,IAAzC,EAAH,EAAmDC,IAAnD,CAAwD,kBAAU;AAChEJ,kBAAQK,MAAR;AACD,SAFD;AAGD,OATM,CAAP;AAUD;;;0BAEKN,O,EAAS;AAAA;;AACb,UAAIA,QAAQO,WAAR,KAAwBC,KAA5B,EACE,OAAO,KAAKC,QAAL,CAAcT,OAAd,CAAP;;AAEF,aAAO,uBAAY,mBAAW;AAC5B,YAAMU,kBAAkBV,QAAQW,GAAR,CAAY;AAAA,iBAAW;AAAA,mBAAM,OAAKF,QAAL,CAAcT,OAAd,CAAN;AAAA,WAAX;AAAA,SAAZ,CAAxB;;AAEA,2BAAQW,GAAR,CAAYD,eAAZ,EAA6B,UAACE,OAAD,EAAa;AACxC,iBAAO,mBAAQC,KAAR,CAAc,IAAd,EAAoBD,SAApB,CAAP;AACD,SAFD,EAEG,EAACE,aAAa,EAAd,EAFH,EAEsBT,IAFtB,CAE2B,kBAAU;AACnCJ,kBAAQK,MAAR;AACD,SAJD;AAKD,OARM,CAAP;AASD;;;;;;kBAGYT,U","file":"geocode.js","sourcesContent":["import qs from 'qs';\r\nimport rp from 'request-promise';\r\nimport Promise from 'bluebird';\r\n\r\nclass GeocodeAPI {\r\n  constructor(key) {\r\n    this.key = key;\r\n    this.url = 'https://maps.googleapis.com/maps/api/geocode/json';\r\n  }\r\n\r\n  _request(address) {\r\n    return new Promise((resolve) => {\r\n      const parameters = qs.stringify({\r\n        address,\r\n        key: this.key,\r\n      });\r\n\r\n      rp({url: this.url + '?' + parameters, json: true}).then(result => {\r\n        resolve(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  query(address) {\r\n    if (address.constructor !== Array)\r\n      return this._request(address);\r\n\r\n    return new Promise(resolve => {\r\n      const addressRequests = address.map(address => () => this._request(address));\r\n\r\n      Promise.map(addressRequests, (request) => {\r\n        return Promise.delay(1000, request());\r\n      }, {concurrency: 50}).then(result => {\r\n        resolve(result);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default GeocodeAPI;"]}