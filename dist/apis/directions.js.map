{"version":3,"sources":["../../src/apis/directions.js"],"names":["DirectionsAPI","key","url","options","resolve","reject","parameters","stringify","mode","json","then","result","status","constructor","Array","_request","requests","map","o","request","delay","concurrency"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;IAEMA,a;AACJ,yBAAYC,GAAZ,EAAiB;AAAA;;AACf,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAW,sDAAX;AACD;;;;6BAEQC,O,EAAS;AAAA;;AAChB,aAAO,uBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,aAAa,aAAGC,SAAH,cACdJ,OADc;AAEjBK,gBAAM,SAFW;AAGjBP,eAAK,MAAKA;AAHO,WAAnB;;AAMA,sCAAG,EAACC,KAAK,MAAKA,GAAL,GAAW,GAAX,GAAiBI,UAAvB,EAAmCG,MAAM,IAAzC,EAAH,EAAmDC,IAAnD,CAAwD,kBAAU;AAChE,cAAIC,OAAOC,MAAP,KAAkB,kBAAtB,EAA0C;AACxCP,mBAAOM,OAAO,eAAP,CAAP;AACD,WAFD,MAEO;AACLP,oBAAQO,MAAR;AACD;AACF,SAND;AAOD,OAdM,CAAP;AAeD;;;0BAEKR,O,EAAS;AAAA;;AACb,UAAIA,QAAQU,WAAR,KAAwBC,KAA5B,EAAmC;AACjC,eAAO,KAAKC,QAAL,CAAcZ,OAAd,CAAP;AACD;;AAED,aAAO,uBAAY,mBAAW;AAC5B,YAAMa,WAAWb,QAAQc,GAAR,CAAY;AAAA,iBAAK;AAAA,mBAAM,OAAKF,QAAL,CAAcG,CAAd,CAAN;AAAA,WAAL;AAAA,SAAZ,CAAjB;;AAEA,2BAAQD,GAAR,CAAYD,QAAZ,EAAsB,UAACG,OAAD,EAAa;AACjC,iBAAO,mBAAQC,KAAR,CAAc,IAAd,EAAoBD,SAApB,CAAP;AACD,SAFD,EAEG,EAACE,aAAa,EAAd,EAFH,EAEsBX,IAFtB,CAE2B,kBAAU;AACnCN,kBAAQO,MAAR;AACD,SAJD;AAKD,OARM,CAAP;AASD;;;;;;kBAGYX,a","file":"directions.js","sourcesContent":["import qs from 'qs';\nimport rp from 'request-promise';\nimport Promise from 'bluebird';\n\nclass DirectionsAPI {\n  constructor(key) {\n    this.key = key;\n    this.url = 'https://maps.googleapis.com/maps/api/directions/json';\n  }\n\n  _request(options) {\n    return new Promise((resolve, reject) => {\n      const parameters = qs.stringify({\n        ...options,\n        mode: 'walking',\n        key: this.key,\n      });\n\n      rp({url: this.url + '?' + parameters, json: true}).then(result => {\n        if (result.status === 'OVER_QUERY_LIMIT') {\n          reject(result['error_message']);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  }\n\n  query(options) {\n    if (options.constructor !== Array) {\n      return this._request(options);\n    }\n\n    return new Promise(resolve => {\n      const requests = options.map(o => () => this._request(o));\n\n      Promise.map(requests, (request) => {\n        return Promise.delay(1000, request());\n      }, {concurrency: 50}).then(result => {\n        resolve(result);\n      });\n    });\n  }\n}\n\nexport default DirectionsAPI;"]}