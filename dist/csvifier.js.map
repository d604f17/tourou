{"version":3,"sources":["../src/csvifier.js"],"names":["readValues","type","name","values","data","readFileSync","__dirname","diagKeys","oneKeys","i","value","substring","indexOf","length","JSON","parse","writeValues","routeData","distance","realDistance","inputData","numberOfWaypoints","iterations","area","runtime","stringify","route","writeFileSync","fileName","typeName","rows","readdirSync","forEach","file","split","max","passes","ant","hest","shift","rowPart1","rowPart2","replace","rowPart3","_tour","push","join"],"mappings":"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","file":"csvifier.js","sourcesContent":["import fs from 'fs';\r\n\r\nconst readValues = (type, name) => {\r\n  let values = {};\r\n  let data = fs.readFileSync(__dirname + '/../logs/' + name + '.log', 'utf8');\r\n\r\n  let diagKeys = [\r\n    'value',\r\n    'distance',\r\n    'realDistance',\r\n    'numberOfWaypoints',\r\n    'iterations',\r\n    'area',\r\n    'runtime',\r\n    'route',\r\n  ];\r\n\r\n  let oneKeys = [\r\n    'value',\r\n    'distance',\r\n    'realDistance',\r\n    'numberOfWaypoints',\r\n    'area',\r\n    'runtime',\r\n    'route',\r\n  ];\r\n\r\n  if (type === 'diag' || type === 'half') {\r\n    for (var i = 0; i < 7; i++) {\r\n      let value = data.substring(0, data.indexOf(','));\r\n      data = data.substring(data.indexOf(',') + 2, data.length);\r\n\r\n      values[diagKeys[i]] = value;\r\n    }\r\n\r\n    values[diagKeys[7]] = JSON.parse(data);\r\n  } else if (type === 'one') {\r\n    for (var i = 0; i < 6; i++) {\r\n      let value = data.substring(0, data.indexOf(','));\r\n      data = data.substring(data.indexOf(',') + 2, data.length);\r\n\r\n      values[oneKeys[i]] = value;\r\n    }\r\n\r\n    values[oneKeys[6]] = JSON.parse(data);\r\n  }\r\n\r\n  return values;\r\n};\r\n\r\nconst writeValues = (type, name, values) => {\r\n  if (type === 'diag' || type === 'half') {\r\n    const routeData = `${values.value}, ${values.distance}, ${values.realDistance}`;\r\n    const inputData = `${values.numberOfWaypoints}, ${values.iterations}`;\r\n    var data = `${routeData}, ${inputData}, ${values.area}, ${values.runtime}, ${JSON.stringify(\r\n        values.route)}`;\r\n\r\n    fs.writeFileSync(__dirname + '/../logs/' + name + '.log', data);\r\n  } else if (type === 'one') {\r\n    const routeData = `${values.value}, ${values.distance}, ${values.realDistance}`;\r\n    const inputData = `${values.numberOfWaypoints}`;\r\n    var data = `${routeData}, ${inputData}, ${values.area}, ${values.runtime}, ${JSON.stringify(\r\n        values.route)}`;\r\n\r\n    fs.writeFileSync(__dirname + '/../logs/' + name + '.log', data);\r\n  }\r\n};\r\n\r\nlet fileName = 'compare-barcelona';\r\nlet typeName = 'half';\r\nlet rows = [];\r\nfs.readdirSync(__dirname + '/../logs/').forEach(file => {\r\n  const [type, name, max, iterations, passes] = file.split('_');\r\n  const [ant, hest] = type.split('-');\r\n\r\n  if(typeName === hest && fileName === name) {\r\n        let values = readValues(typeName, file.split('.').shift());\r\n\r\n        let rowPart1 = `${values.value};${values.distance};${values.realDistance}`;\r\n        let rowPart2 = `${values.numberOfWaypoints};${values.iterations};${values.area.replace('.',\r\n            ',')}`;\r\n        let rowPart3 = `${values.runtime};${values.route._tour.length}`;\r\n\r\n        rows.push(`${rowPart1};${rowPart2};${rowPart3}`);\r\n  }\r\n\r\n\r\n  // if (type === typeName) {\r\n  //   const [city, iterations, passes] = cityIP.split('-');\r\n  //\r\n  //   if (city + '-' + iterations === fileName) {\r\n  //     let values = readValues(type, file.split('.').shift());\r\n  //\r\n  //     let rowPart1 = `${values.value};${values.distance};${values.realDistance}`;\r\n  //     let rowPart2 = `${values.numberOfWaypoints};${values.iterations};${values.area.replace('.',\r\n  //         ',')}`;\r\n  //     let rowPart3 = `${values.runtime};${values.route._tour.length}`;\r\n  //\r\n  //     rows.push(`${rowPart1};${rowPart2};${rowPart3}`);\r\n  //   }\r\n  // }\r\n});\r\n\r\nfs.writeFileSync(__dirname + '/../logs/' + typeName + '-' + fileName + '.csv', rows.join('\\r\\n'));\r\n\r\n// fs.readdirSync(__dirname + '/../logs/').forEach(file => {\r\n//   const [name, city] = file.split('_');\r\n//   const [test, type] = name.split('-');\r\n//\r\n//   if (type === 'one' || type === 'diag') {\r\n//     let values = readValues(type, file.split('.').shift());\r\n//     values.realDistance = values.route._realDistance + 2500 * (values.route._tour.length - 2);\r\n//     values.distance = values.route._distance - 2500;\r\n//     delete values.route._graph;\r\n//\r\n//     console.log(file);\r\n//\r\n//     writeValues(type, file.split('.').shift(), values);\r\n//   }\r\n// });"]}