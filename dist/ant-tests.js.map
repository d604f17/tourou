{"version":3,"sources":["../src/ant-tests.js"],"names":["attractions","Object","keys","map","city","attraction","log","name","data","callback","writeFile","__dirname","error","console","asyncIterate","list","iterate","index","length","antTest","graphSize","iterations","colonySize","Promise","resolve","reject","waypoints","sydney","slice","then","route","boxes","maxIterations","_value","_distance","appendFile","tests","i","push","timeout","test","next","setTimeout"],"mappings":"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","file":"ant-tests.js","sourcesContent":["import fs from 'fs';\r\nimport mmas from './aco/mmas';\r\nimport {one} from './strategies';\r\nimport cities from '../attractions';\r\n\r\nlet attractions = {};\r\n\r\nObject.keys(cities).map(city => {\r\n  attractions[city] = cities[city].map(attraction => {\r\n    return [attraction['lng'], attraction['lat'], attraction['popularity']];\r\n  });\r\n});\r\n\r\nconst log = (name, data, callback) => {\r\n  fs.writeFile(__dirname + '/../logs/' + name + '.log', data, function(error) {\r\n    if (error) console.error(error);\r\n    callback();\r\n  });\r\n};\r\n\r\nfunction asyncIterate(list, callback) {\r\n  (function iterate(index) {\r\n    callback(list[index], index, function() {\r\n      if (index + 1 < list.length) iterate(++index);\r\n    });\r\n  })(0);\r\n}\r\n\r\nconst antTest = (graphSize, iterations, colonySize) => {\r\n  return function() {\r\n    return new Promise((resolve, reject) => {\r\n      const waypoints = attractions.sydney.slice(0, graphSize);\r\n      one(waypoints).then(boxes => {\r\n        const route = mmas(waypoints, boxes, {\r\n          maxIterations: iterations,\r\n          colonySize: colonySize,\r\n        });\r\n\r\n        const data = `${graphSize}, ${iterations}, ${colonySize}, ${route._value}, ${route._distance}\\r\\n`;\r\n\r\n        fs.appendFile(__dirname + '/../logs/ant.tests.csv', data, function(error) {\r\n          if (error) reject(error);\r\n          else resolve(route);\r\n        });\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nlet tests = [];\r\nfor (var graphSize = 10; graphSize <= 50; graphSize += 10) {\r\n  for (var iterations = 10; iterations <= 100; iterations += 10) {\r\n    for (var colonySize = 5; colonySize <= 30; colonySize += 5) {\r\n      for (var i = 1; i <= 5; i++) {\r\n        tests.push(antTest(graphSize, iterations, colonySize));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nlet timeout = null;\r\nasyncIterate(tests, function(test, index, next) {\r\n  if (timeout == null) {\r\n    console.log(tests.length - index + ' left');\r\n    timeout = setTimeout(() => {\r\n      timeout = null;\r\n    }, 10000);\r\n  }\r\n\r\n  test().then(() => {\r\n    next();\r\n  });\r\n});\r\n"]}