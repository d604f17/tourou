{"version":3,"sources":["../src/main.js"],"names":["geocodeAPI","attractionAPI","geocode","flickr","cities","road","process","argv","length","toLowerCase","city","country","maxDistance","start","Date","getTime","query","then","attractions","location","results","waypoints","map","attraction","unshift","lng","lat","boundexBox","generateFromWaypoints","regression","x","Math","round","log","console","area","route","boxes","coordinates","_tour","vertex","y","origin","shift","destination","pop","join","legs","result","routes","distances","leg","distance","value","_heuristicDistance","_distance","reduce","a","b","_runtime","_graph","catch","error"],"mappings":"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","file":"main.js","sourcesContent":["import mmas from './mmas';\nimport directions from './directions';\nimport diagonalization from './strategies/diagonalization';\nimport AttractionAPI from './apis/attractions';\nimport GeocodeAPI from './apis/geocode';\nimport BoundedBox from './BoundedBox';\n\nconst geocodeAPI = new GeocodeAPI('AIzaSyAUMhnd_8pvLLYFvUkuAF612fXbLSSyCLc');\n\nconst attractionAPI = new AttractionAPI({\n  geocode: 'AIzaSyAUMhnd_8pvLLYFvUkuAF612fXbLSSyCLc',\n  flickr: '85f11febb88e3a4d49342a95b7bcf1e8',\n});\n\nconst cities = {\n  'aalborg': 'denmark/jutland/aalborg',\n  'copenhagen': 'denmark/copenhagen',\n  'aarhus': 'denmark/aarhus',\n  'madrid': 'spain/madrid',\n  'berlin': 'germany/berlin',\n  'perth': 'australia/western-australia/perth',\n  'rio de janeiro': 'brazil/rio-de-janeiro',\n  'rome': 'italy/rome',\n  'mexico city': 'mexico/mexico-city',\n  'barcelona': 'spain/barcelona',\n  'new york city': 'usa/new-york-city',\n  'venice': 'italy/venice',\n  'johannesburg': 'south-africa/gauteng/johannesburg',\n  'cairo': 'egypt/cairo',\n  'los angeles': 'usa/los-angeles',\n  'bern': 'switzerland/bern',\n  'las vegas': 'usa/las-vegas',\n  'london': 'england/london',\n  'dallas': '/usa/texas/dallas',\n  'honolulu': '/usa/honolulu-and-waikiki',\n  'stockholm': '/sweden/stockholm',\n  'oslo': '/norway/oslo',\n  'amsterdam': '/the-netherlands/amsterdam',\n  'brussels': '/belgium/brussels',\n  'vienna': '/austria/vienna',\n  'zurich': '/switzerland/zurich',\n  'paris': '/france/paris',\n  'lisbon': '/portugal/lisbon',\n  'athens': '/greece/athens',\n};\n\nconst road = process.argv[process.argv.length - 4].toLowerCase();\nconst city = process.argv[process.argv.length - 3].toLowerCase();\nconst country = process.argv[process.argv.length - 2].toLowerCase();\nconst maxDistance = process.argv[process.argv.length - 1];\n\nconst start = new Date().getTime();\n\nif (city in cities) {\n  attractionAPI.query(cities[city]).then(attractions => {\n    if (attractions.length) {\n      geocodeAPI.query(`${road}, ${city}, ${country}`).then(geocode => {\n        const location = geocode.results[0]['geometry']['location'];\n\n        const waypoints = attractions.map(attraction => {\n          return [\n            attraction['location']['lng'],\n            attraction['location']['lat'],\n            attraction['popularity']];\n        });\n\n        waypoints.unshift([location.lng, location.lat, 0]);\n\n        const boundexBox = BoundedBox.generateFromWaypoints(waypoints);\n\n        const regression = (x) => {\n          return Math.round(27.80137609 * Math.log(x) - 122.02143175);\n        };\n\n        console.log('running diagonalization');\n        diagonalization(waypoints, regression(boundexBox.area)).then(boxes => {\n          const route = mmas(waypoints, boxes, {maxDistance});\n\n          const coordinates = route._tour.map(vertex => {\n            return vertex.y + ',' + vertex.x;\n          });\n\n          console.log('fetching real distance');\n          directions.query({\n            origin: coordinates.shift(),\n            destination: coordinates.pop(),\n            waypoints: coordinates.join('|'),\n          }).then(result => {\n            const legs = result.routes[0]['legs'];\n            const distances = legs.map(leg => leg.distance.value);\n            route._heuristicDistance = route._distance;\n            route._distance = distances.reduce((a, b) => a + b);\n            route._distance += 2500 * (legs.length - 2);\n            route._runtime = new Date().getTime() - start;\n            delete route._graph;\n\n            if (route._tour.length > 2) {\n              console.log(route);\n            } else {\n              console.log('no route found with that maximum distance.');\n            }\n          });\n        });\n      });\n    }\n  }).catch(console.error);\n}\n"]}