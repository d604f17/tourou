{"version":3,"sources":["../src/main.js"],"names":["attractionAPI","geocode","flickr","cities","city","process","argv","length","maxDistance","start","Date","getTime","query","then","waypoints","attractions","map","attraction","boundexBox","generateFromWaypoints","regression","x","Math","round","log","console","area","route","boxes","coordinates","_tour","vertex","y","mode","origin","shift","destination","pop","join","legs","result","routes","distances","leg","distance","value","_heuristicDistance","_distance","reduce","a","b","_runtime","_graph","catch","error"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,gBAAgB,0BAAkB;AACtCC,WAAS,yCAD6B;AAEtCC,UAAQ;AAF8B,CAAlB,CAAtB;;AAKA,IAAMC,SAAS;AACb,gBAAc;AADD,CAAf;;AAIA,IAAMC,OAAOC,QAAQC,IAAR,CAAaD,QAAQC,IAAR,CAAaC,MAAb,GAAsB,CAAnC,CAAb;AACA,IAAMC,cAAcH,QAAQC,IAAR,CAAaD,QAAQC,IAAR,CAAaC,MAAb,GAAsB,CAAnC,CAApB;AACA,IAAME,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAd;;AAEA,IAAIP,QAAQD,MAAZ,EAAoB;AAClBH,gBAAcY,KAAd,CAAoBT,OAAOC,IAAP,CAApB,EAAkCS,IAAlC,CAAuC,uBAAe;AACpD,QAAMC,YAAYC,YAAYC,GAAZ,CAAgB,sBAAc;AAC9C,aAAO,CACLC,WAAW,UAAX,EAAuB,KAAvB,CADK,EAELA,WAAW,UAAX,EAAuB,KAAvB,CAFK,EAGLA,WAAW,YAAX,CAHK,CAAP;AAID,KALiB,CAAlB;;AAOA,QAAMC,aAAa,qBAAWC,qBAAX,CAAiCL,SAAjC,CAAnB;;AAEA,QAAMM,aAAa,SAAbA,UAAa,CAACC,CAAD,EAAO;AACxB,aAAOC,KAAKC,KAAL,CAAW,cAAcD,KAAKE,GAAL,CAASH,CAAT,CAAd,GAA4B,YAAvC,CAAP;AACD,KAFD;;AAIAI,YAAQD,GAAR,CAAY,yBAAZ;AACA,mCAAgBV,SAAhB,EAA2BM,WAAWF,WAAWQ,IAAtB,CAA3B,EAAwDb,IAAxD,CAA6D,iBAAS;AACpE,UAAMc,QAAQ,oBAAKb,SAAL,EAAgBc,KAAhB,EAAuB,EAACpB,wBAAD,EAAvB,CAAd;;AAEA,UAAMqB,cAAcF,MAAMG,KAAN,CAAYd,GAAZ,CAAgB,kBAAU;AAC5C,eAAOe,OAAOC,CAAP,GAAW,GAAX,GAAiBD,OAAOV,CAA/B;AACD,OAFmB,CAApB;;AAIAI,cAAQD,GAAR,CAAY,wBAAZ;AACA,2BAAWZ,KAAX,CAAiB;AACfqB,cAAM,SADS;AAEfC,gBAAQL,YAAYM,KAAZ,EAFO;AAGfC,qBAAaP,YAAYQ,GAAZ,EAHE;AAIfvB,mBAAWe,YAAYS,IAAZ,CAAiB,GAAjB;AAJI,OAAjB,EAKGzB,IALH,CAKQ,kBAAU;AAChB,YAAM0B,OAAOC,OAAOC,MAAP,CAAc,CAAd,EAAiB,MAAjB,CAAb;AACA,YAAMC,YAAYH,KAAKvB,GAAL,CAAS;AAAA,iBAAO2B,IAAIC,QAAJ,CAAaC,KAApB;AAAA,SAAT,CAAlB;AACAlB,cAAMmB,kBAAN,GAA2BnB,MAAMoB,SAAjC;AACApB,cAAMoB,SAAN,GAAkBL,UAAUM,MAAV,CAAiB,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUD,IAAIC,CAAd;AAAA,SAAjB,CAAlB;AACAvB,cAAMoB,SAAN,IAAmB,QAAQR,KAAKhC,MAAL,GAAc,CAAtB,CAAnB;AACAoB,cAAMwB,QAAN,GAAiB,IAAIzC,IAAJ,GAAWC,OAAX,KAAuBF,KAAxC;AACA,eAAOkB,MAAMyB,MAAb;;AAEA3B,gBAAQD,GAAR,CAAYG,KAAZ;AACD,OAfD;AAgBD,KAxBD;AAyBD,GAxCD,EAwCG0B,KAxCH,CAwCS5B,QAAQ6B,KAxCjB;AAyCD","file":"main.js","sourcesContent":["import mmas from './mmas';\r\nimport directions from './directions';\r\nimport diagonalization from './strategies/diagonalization';\r\nimport AttractionAPI from './apis/attractions';\r\nimport BoundedBox from './BoundedBox';\r\n\r\nconst attractionAPI = new AttractionAPI({\r\n  geocode: 'AIzaSyC6rAQ1c46pBfRcnQwSidnpGBeeumnhmjU',\r\n  flickr: '85f11febb88e3a4d49342a95b7bcf1e8',\r\n});\r\n\r\nconst cities = {\r\n  'copenhagen': 'denmark/copenhagen',\r\n};\r\n\r\nconst city = process.argv[process.argv.length - 2];\r\nconst maxDistance = process.argv[process.argv.length - 1];\r\nconst start = new Date().getTime();\r\n\r\nif (city in cities) {\r\n  attractionAPI.query(cities[city]).then(attractions => {\r\n    const waypoints = attractions.map(attraction => {\r\n      return [\r\n        attraction['location']['lng'],\r\n        attraction['location']['lat'],\r\n        attraction['popularity']];\r\n    });\r\n\r\n    const boundexBox = BoundedBox.generateFromWaypoints(waypoints);\r\n\r\n    const regression = (x) => {\r\n      return Math.round(27.80137609 * Math.log(x) - 122.02143175);\r\n    };\r\n\r\n    console.log('running diagonalization');\r\n    diagonalization(waypoints, regression(boundexBox.area)).then(boxes => {\r\n      const route = mmas(waypoints, boxes, {maxDistance});\r\n\r\n      const coordinates = route._tour.map(vertex => {\r\n        return vertex.y + ',' + vertex.x;\r\n      });\r\n\r\n      console.log('fetching real distance');\r\n      directions.query({\r\n        mode: 'walking',\r\n        origin: coordinates.shift(),\r\n        destination: coordinates.pop(),\r\n        waypoints: coordinates.join('|'),\r\n      }).then(result => {\r\n        const legs = result.routes[0]['legs'];\r\n        const distances = legs.map(leg => leg.distance.value);\r\n        route._heuristicDistance = route._distance;\r\n        route._distance = distances.reduce((a, b) => a + b);\r\n        route._distance += 2500 * (legs.length - 2);\r\n        route._runtime = new Date().getTime() - start;\r\n        delete route._graph;\r\n\r\n        console.log(route);\r\n      });\r\n    });\r\n  }).catch(console.error);\r\n}\r\n"]}