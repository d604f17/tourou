{"version":3,"sources":["../../src/strategies/highestValueFirst.js"],"names":["directions","orderByHighestValue","waypoints","clone","sort","a","b","value","calculateBoundedBox","minLat","minLon","maxLat","maxLon","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","forEach","waypoint","latitude","longitude","nw","se","queryDistance","edge","Promise","resolve","reject","query","mode","origin","destination","then","walkingDistance","result","routes","legs","distance","catch","calculateDistance","haversineDistance","highestValueFirst","iterations","highestValueWaypoints","queries","i","push","all","sum","edges","length","reduce","average","multiplier"],"mappings":"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","file":"highestValueFirst.js","sourcesContent":["import Directions from 'directions-api';\r\nimport Edge from '../Edge';\r\n\r\nconst directions = new Directions('AIzaSyBw9WbNkrlLt4IXxpGzAAmQrRCn_PchFog');\r\n\r\nconst orderByHighestValue = (waypoints) => {\r\n  let clone = [...waypoints];\r\n  clone.sort((a, b) => b.value - a.value);\r\n  return clone;\r\n};\r\n\r\nconst calculateBoundedBox = (waypoints) => {\r\n  let minLat, minLon, maxLat, maxLon;\r\n  minLat = minLon = Number.MAX_SAFE_INTEGER;\r\n  maxLat = maxLon = Number.MIN_SAFE_INTEGER;\r\n\r\n  waypoints.forEach(waypoint => {\r\n    if (waypoint.latitude < minLat) minLat = waypoint.latitude;\r\n    if (waypoint.latitude > maxLat) maxLat = waypoint.latitude;\r\n    if (waypoint.longitude < minLon) minLon = waypoint.longitude;\r\n    if (waypoint.longitude > maxLon) maxLon = waypoint.longitude;\r\n  });\r\n\r\n  return {\r\n    nw: [minLon, minLat],\r\n    se: [maxLon, maxLat],\r\n  };\r\n};\r\n\r\nconst queryDistance = (edge) => new Promise((resolve, reject) => {\r\n  directions.query({\r\n    mode: 'walking',\r\n    origin: edge.a.latitude + ',' + edge.a.longitude,\r\n    destination: edge.b.latitude + ',' + edge.b.longitude,\r\n  }).then(result => {\r\n    edge.walkingDistance = result.routes[0].legs[0].distance.value;\r\n    resolve(edge);\r\n  }).catch(reject);\r\n});\r\n\r\nconst calculateDistance = (a, b) => {\r\n  let result = a.walkingDistance / a.haversineDistance;\r\n  if (b) result += b.walkingDistance / b.haversineDistance;\r\n  return result;\r\n};\r\n\r\nconst highestValueFirst = (waypoints, iterations) => {\r\n  return new Promise((resolve) => {\r\n    const highestValueWaypoints = orderByHighestValue(waypoints);\r\n\r\n    let queries = [];\r\n\r\n    for (let i = 0; i < iterations; i++) {\r\n      const edge = new Edge(highestValueWaypoints[i], highestValueWaypoints[i + 1]);\r\n      queries.push(queryDistance(edge));\r\n    }\r\n\r\n    Promise.all(queries).then(edges => {\r\n      let sum = edges.length > 1 ? edges.reduce(calculateDistance) : calculateDistance(edges[0]);\r\n      let average = sum / edges.length;\r\n\r\n      resolve([\r\n        {\r\n          ...calculateBoundedBox(waypoints),\r\n          multiplier: average,\r\n        },\r\n      ]);\r\n    });\r\n  });\r\n};\r\n\r\nexport default highestValueFirst;"]}