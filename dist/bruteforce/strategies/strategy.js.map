{"version":3,"sources":["../../../src/bruteforce/strategies/strategy.js"],"names":["directions","queryEdgeDistance","edge","Promise","resolve","reject","query","mode","origin","a","latitude","longitude","destination","b","then","distance","result","routes","legs","value","queryBoxDistance","box","n","w","s","e","route","leg"],"mappings":";;;;;;;AAAA;;;;;;AACA,IAAMA,aAAa,4BAAe,yCAAf,CAAnB;;AAEO,IAAMC,gDAAoB,SAApBA,iBAAoB,CAACC,IAAD,EAAU;AACzC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCL,eAAWM,KAAX,CAAiB;AACfC,YAAM,SADS;AAEfC,cAAQN,KAAKO,CAAL,CAAOC,QAAP,GAAkB,GAAlB,GAAwBR,KAAKO,CAAL,CAAOE,SAFxB;AAGfC,mBAAaV,KAAKW,CAAL,CAAOH,QAAP,GAAkB,GAAlB,GAAwBR,KAAKW,CAAL,CAAOF;AAH7B,KAAjB,EAIGG,IAJH,CAIQ,kBAAU;AAChBV,cAAQ;AACNW,kBAAUC,OAAOC,MAAP,CAAc,CAAd,EAAiBC,IAAjB,CAAsB,CAAtB,EAAyBH,QAAzB,CAAkCI,KADtC;AAENjB;AAFM,OAAR;AAID,KATD;AAUD,GAXM,CAAP;AAYD,CAbM;;AAeA,IAAMkB,8CAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAAS;AACvC,SAAO,IAAIlB,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BJ,eAAWM,KAAX,CAAiB;AACfC,YAAM,SADS;AAEfC,cAAQa,IAAIC,CAAJ,GAAQ,GAAR,GAAcD,IAAIE,CAFX;AAGfX,mBAAaS,IAAIG,CAAJ,GAAQ,GAAR,GAAcH,IAAII;AAHhB,KAAjB,EAIGX,IAJH,CAIQ,kBAAU;AAChB,UAAIC,WAAW,CAAf;AACA,UAAMW,QAAQV,OAAOC,MAAP,CAAc,CAAd,CAAd;;AAEA,UAAIS,KAAJ,EAAW;AACT,YAAMC,MAAMD,MAAMR,IAAN,CAAW,CAAX,CAAZ;AACAH,mBAAWY,IAAIZ,QAAJ,CAAaI,KAAxB;AACA;AACA;AACD;;AAEDf,cAAQ,EAACW,kBAAD,EAAWM,QAAX,EAAR;AACD,KAhBD;AAiBD,GAlBM,CAAP;AAmBD,CApBM","file":"strategy.js","sourcesContent":["import Directions from 'directions-api';\r\nconst directions = new Directions('AIzaSyBw9WbNkrlLt4IXxpGzAAmQrRCn_PchFog');\r\n\r\nexport const queryEdgeDistance = (edge) => {\r\n  return new Promise((resolve, reject) => {\r\n    directions.query({\r\n      mode: 'walking',\r\n      origin: edge.a.latitude + ',' + edge.a.longitude,\r\n      destination: edge.b.latitude + ',' + edge.b.longitude,\r\n    }).then(result => {\r\n      resolve({\r\n        distance: result.routes[0].legs[0].distance.value,\r\n        edge\r\n      });\r\n    })\r\n  });\r\n};\r\n\r\nexport const queryBoxDistance = (box) => {\r\n  return new Promise((resolve) => {\r\n    directions.query({\r\n      mode: 'walking',\r\n      origin: box.n + ',' + box.w,\r\n      destination: box.s + ',' + box.e,\r\n    }).then(result => {\r\n      let distance = 0;\r\n      const route = result.routes[0];\r\n\r\n      if (route) {\r\n        const leg = route.legs[0];\r\n        distance = leg.distance.value;\r\n        // box.nw = [leg.start_location.lng, leg.start_location.lat];\r\n        // box.se = [leg.end_location.lng, leg.end_location.lat];\r\n      }\r\n\r\n      resolve({distance, box});\r\n    });\r\n  });\r\n};\r\n"]}