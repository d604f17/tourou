{"version":3,"sources":["../../src/bruteforce/test.js"],"names":["fs","require","util","console","log","iterations","maxDistance","country","process","argv","pop","attractions","getArea","box","vertical","longitude","e","latitude","n","s","horizontal","w","haversineDistance","start","Date","getTime","waypoints","map","sight","lng","lat","popularity","then","end","area","generateFromWaypoints","route","text","hash","value","length","distance","realDistance","JSON","stringify","writeFile","__dirname","flag","error","catch"],"mappings":";;AAGA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AARA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACAE,QAAQC,GAAR,CAAY,0DAAZ;;;AAQA,IAAMC,aAAa,CAAnB;AACA,IAAMC,cAAc,KAApB;AACA,IAAMC,UAAUC,QAAQC,IAAR,CAAaC,GAAb,EAAhB;AACA,IAAMC,cAAcV,QAAQ,mBAAmBM,OAA3B,CAApB;;AAEA,IAAMK,UAAU,SAAVA,OAAU,CAACC,GAAD,EAAS;AACvB,MAAMC,WAAW,mBAAS,EAACC,WAAWF,IAAIG,CAAhB,EAAmBC,UAAUJ,IAAIK,CAAjC,EAAT,EACb,EAACH,WAAWF,IAAIG,CAAhB,EAAmBC,UAAUJ,IAAIM,CAAjC,EADa,CAAjB;AAEA,MAAMC,aAAa,mBAAS,EAACL,WAAWF,IAAIG,CAAhB,EAAmBC,UAAUJ,IAAIK,CAAjC,EAAT,EACf,EAACH,WAAWF,IAAIQ,CAAhB,EAAmBJ,UAAUJ,IAAIK,CAAjC,EADe,CAAnB;;AAGA,SAAOJ,SAASQ,iBAAT,GAA6BF,WAAWE,iBAA/C;AACD,CAPD;;AASA,IAAIC,QAAQ,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,IAAMC,YAAYf,YAAYgB,GAAZ,CAAgB;AAAA,SAAS,uBAAaC,MAAMC,GAAnB,EAAwBD,MAAME,GAA9B,EAAmCF,MAAMG,UAAzC,CAAT;AAAA,CAAhB,CAAlB;AACA,4BAAa1B,UAAb,EAAyBC,WAAzB,EAAsCoB,SAAtC,mBAAsDM,IAAtD,CAA2D,iBAAS;AAClE,MAAIC,MAAM,IAAIT,IAAJ,GAAWC,OAAX,EAAV;;AAEA,MAAMS,OAAOtB,QAAQ,qBAAWuB,qBAAX,CAAiCC,MAAMV,SAAvC,CAAR,CAAb;AACA,MAAMW,OAAUD,MAAME,IAAhB,UAAyB,KAAzB,UAAmCF,MAAMG,KAAzC,UAAmDhC,OAAnD,UAA+DmB,UAAUc,MAAzE,UAAoFN,IAApF,UAA6F7B,UAA7F,UAA4G+B,MAAMK,QAAlH,UAA+HL,MAAMM,YAArI,UAAsJpC,WAAtJ,WAAsK2B,MAAMV,KAA5K,WAAsLoB,KAAKC,SAAL,CAAeR,KAAf,CAA5L;AACApC,KAAG6C,SAAH,CAAaC,YAAY,SAAZ,GAAwBvC,OAAxB,GAAkC,MAA/C,EAAuD8B,IAAvD,EAA6D,EAACU,MAAM,GAAP,EAA7D,EAA0E,UAASC,KAAT,EAAgB;AACxF7C,YAAQC,GAAR,CAAY4C,KAAZ;AACD,GAFD;AAGD,CARD,EAQGC,KARH,CAQS9C,QAAQ6C,KARjB","file":"test.js","sourcesContent":["const fs = require('fs');\r\nconst util = require('util');\r\nconsole.log('--------------------------------------------------------');\r\nimport Waypoint from './Waypoint';\r\nimport BoundedBox from './BoundedBox';\r\nimport Edge from './Edge';\r\nimport {one, diagonalization} from './strategies';\r\nimport orienteering from './orienteering';\r\nimport halfnhalf from './halfnhalf';\r\n\r\nconst iterations = 0;\r\nconst maxDistance = 30000;\r\nconst country = process.argv.pop();\r\nconst attractions = require('./attractions/' + country);\r\n\r\nconst getArea = (box) => {\r\n  const vertical = new Edge({longitude: box.e, latitude: box.n},\r\n      {longitude: box.e, latitude: box.s});\r\n  const horizontal = new Edge({longitude: box.e, latitude: box.n},\r\n      {longitude: box.w, latitude: box.n});\r\n\r\n  return vertical.haversineDistance * horizontal.haversineDistance;\r\n};\r\n\r\nvar start = new Date().getTime();\r\nconst waypoints = attractions.map(sight => new Waypoint(sight.lng, sight.lat, sight.popularity));\r\norienteering(iterations, maxDistance, waypoints, one).then(route => {\r\n  var end = new Date().getTime();\r\n\r\n  const area = getArea(BoundedBox.generateFromWaypoints(route.waypoints));\r\n  const text = `${route.hash}, ${'one'}, ${route.value}, ${country}, ${waypoints.length}, ${area}, ${iterations}, ${route.distance}, ${route.realDistance}, ${maxDistance}, ${end - start}, ${JSON.stringify(route)}`;\r\n  fs.writeFile(__dirname + '/tests/' + country + '.txt', text, {flag: 'w'}, function(error) {\r\n    console.log(error);\r\n  });\r\n}).catch(console.error);"]}