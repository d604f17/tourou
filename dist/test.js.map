{"version":3,"sources":["../src/test.js"],"names":["attractions","Object","keys","map","city","attraction","log","name","data","callback","writeFileSync","__dirname","test","func","console","Promise","resolve","asyncIterate","list","iterate","index","length","getArea","box","verticalA","longitude","e","latitude","n","verticalB","s","horizontalA","horizontalB","w","vertical","unit","horizontal","oneTest","waypoints","passes","queries","i","push","start","Date","getTime","then","route","boxes","coordinates","_tour","vertex","y","x","area","generateFromWaypoints","_graph","_vertices","v","query","mode","origin","shift","destination","pop","join","legs","result","routes","distances","leg","distance","value","_realDistance","reduce","a","b","end","routeData","_distance","inputData","JSON","stringify","diagonalizationTest","iterations","theHalfeningTest","tests","barcelona","berlin","rio","rome","next","catch","error"],"mappings":"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","file":"test.js","sourcesContent":["import util from 'util';\r\nimport fs from 'fs';\r\nimport haversine from 'haversine';\r\nimport BoundedBox from './BoundedBox';\r\nimport mmas from './mmas/mmas';\r\nimport halfnhalf from './mmas/halfnhalf';\r\nimport {one, diagonalization} from './strategies';\r\nimport cities from '../attractions';\r\nimport directions from './directions';\r\n\r\nlet attractions = {};\r\nObject.keys(cities).map(city => {\r\n  attractions[city] = cities[city].map(attraction => {\r\n    return [attraction['lng'], attraction['lat'], attraction['popularity']];\r\n  });\r\n});\r\n\r\nconst log = (name, data, callback) => {\r\n  fs.writeFileSync(__dirname + '/../logs/' + name + '.log', data);\r\n  callback();\r\n};\r\n\r\nconst test = (name, func) => {\r\n  return function() {\r\n    console.log(name, 'started');\r\n    return new Promise(resolve => {\r\n      func((data) => {\r\n        resolve(data);\r\n        log(name, data, () => {\r\n          console.log(name, 'complete');\r\n        });\r\n      });\r\n    });\r\n  };\r\n};\r\n\r\nconst asyncIterate = (list, callback) => {\r\n  (function iterate(index) {\r\n    callback(list[index], index, function() {\r\n      if (index + 1 < list.length) iterate(++index);\r\n    });\r\n  })(0);\r\n};\r\n\r\nconst getArea = (box) => {\r\n  const verticalA = {longitude: box.e, latitude: box.n};\r\n  const verticalB = {longitude: box.e, latitude: box.s};\r\n  const horizontalA = {longitude: box.e, latitude: box.n};\r\n  const horizontalB = {longitude: box.w, latitude: box.n};\r\n  const vertical = haversine(verticalA, verticalB, {unit: 'meter'});\r\n  const horizontal = haversine(horizontalA, horizontalB, {unit: 'meter'});\r\n  return vertical * horizontal;\r\n};\r\n\r\nconst oneTest = (city, waypoints, passes) => {\r\n  let queries = [];\r\n\r\n  for (var i = 1; i <= passes; i++) {\r\n    queries.push(\r\n        test(`ant-one_${city}_p${i}`, resolve => {\r\n          var start = new Date().getTime();\r\n          one(waypoints).then(boxes => {\r\n            const route = mmas(waypoints, boxes);\r\n\r\n            const coordinates = route._tour.map(vertex => {\r\n              return vertex.y + ',' + vertex.x;\r\n            });\r\n\r\n            const area = getArea(\r\n                BoundedBox.generateFromWaypoints(route._graph._vertices.map(v => [v.x, v.y])));\r\n\r\n            directions.query({\r\n              mode: 'walking',\r\n              origin: coordinates.shift(),\r\n              destination: coordinates.pop(),\r\n              waypoints: coordinates.join('|'),\r\n            }).then(result => {\r\n              let legs = result.routes[0].legs;\r\n              let distances = legs.map(leg => leg.distance.value);\r\n              route._realDistance = distances.reduce((a, b) => a + b);\r\n              route._realDistance += 2500 * (legs.length - 1);\r\n\r\n              var end = new Date().getTime();\r\n              const routeData = `${route.value}, ${route._distance}, ${route._realDistance}`;\r\n              const inputData = `${waypoints.length}`;\r\n              delete route['_graph'];\r\n              resolve(\r\n                  `${routeData}, ${inputData}, ${area}, ${end - start}, ${JSON.stringify(route)}`);\r\n            });\r\n          });\r\n        }),\r\n    );\r\n  }\r\n\r\n  return queries;\r\n};\r\n\r\nconst diagonalizationTest = (city, waypoints, passes, iterations) => {\r\n  let queries = [];\r\n\r\n  for (var i = 1; i <= passes; i++) {\r\n    queries.push(\r\n        test(`ant-diag_${city}_i${iterations}_p${i}`, resolve => {\r\n          var start = new Date().getTime();\r\n\r\n          diagonalization(waypoints, iterations).then(boxes => {\r\n            const route = mmas(waypoints, boxes);\r\n\r\n            const coordinates = route._tour.map(vertex => {\r\n              return vertex.y + ',' + vertex.x;\r\n            });\r\n\r\n            const area = getArea(\r\n                BoundedBox.generateFromWaypoints(route._graph._vertices.map(v => [v.x, v.y])));\r\n            directions.query({\r\n              mode: 'walking',\r\n              origin: coordinates.shift(),\r\n              destination: coordinates.pop(),\r\n              waypoints: coordinates.join('|'),\r\n            }).then(result => {\r\n              let legs = result.routes[0].legs;\r\n              let distances = legs.map(leg => leg.distance.value);\r\n              route._realDistance = distances.reduce((a, b) => a + b);\r\n              route._realDistance += 2500 * (legs.length - 2);\r\n\r\n              var end = new Date().getTime();\r\n              const routeData = `${route.value}, ${route._distance}, ${route._realDistance}`;\r\n              const inputData = `${waypoints.length}, ${iterations}`;\r\n              delete route['_graph'];\r\n              resolve(\r\n                  `${routeData}, ${inputData}, ${area}, ${end - start}, ${JSON.stringify(route)}`);\r\n            });\r\n          });\r\n        }),\r\n    );\r\n  }\r\n\r\n  return queries;\r\n};\r\n\r\nconst theHalfeningTest = (city, waypoints, passes, iterations) => {\r\n  let queries = [];\r\n\r\n  for (var i = 1; i <= passes; i++) {\r\n    queries.push(\r\n        test(`ant-half_${city}_i${iterations}_p${i}`, resolve => {\r\n          var start = new Date().getTime();\r\n          halfnhalf(iterations, 20000, waypoints).then(route => {\r\n            var end = new Date().getTime();\r\n\r\n            const area = getArea(\r\n                BoundedBox.generateFromWaypoints(route._graph._vertices.map(v => [v.x, v.y])));\r\n\r\n            const routeData = `${route.value}, ${route._distance}, ${route._realDistance}`;\r\n            const inputData = `${waypoints.length}, ${iterations}`;\r\n\r\n            delete route['_graph'];\r\n            resolve(\r\n                `${routeData}, ${inputData}, ${area}, ${end - start}, ${JSON.stringify(route)}`);\r\n          });\r\n        }),\r\n    );\r\n  }\r\n\r\n  return queries;\r\n};\r\n\r\nconst tests = [\r\n    // tests to run.\r\n    // differenc max distance.\r\n    // compare unused cities.\r\n\r\n  // ...oneTest('sydney', attractions.sydney, 1),\r\n\r\n  // ...oneTest('newyorkcity', attractions.newYorkCity, 5),\r\n  // ...diagonalizationTest('newyorkcity', attractions.newYorkCity, 5, 500),\r\n  // ...theHalfeningTest('newyorkcity', attractions.newyorkcity, 5, 1),\r\n\r\n  // ...oneTest('copenhagen', attractions.copenhagen, 10),\r\n  // ...oneTest('madrid', attractions.madrid, 10),\r\n  // ...oneTest('venice', attractions.venice, 10),\r\n  // ...oneTest('newYorkCity', attractions.newYorkCity, 1),\r\n\r\n  ...theHalfeningTest('compare-barcelona_m20k', attractions.barcelona, 5, 3),\r\n  ...diagonalizationTest('compare-barcelona_m20k', attractions.barcelona, 5, 30),\r\n\r\n  ...theHalfeningTest('compare-berlin_m20k', attractions.berlin, 5, 3),\r\n  ...diagonalizationTest('compare-berlin_m20k', attractions.berlin, 5, 45),\r\n\r\n  ...theHalfeningTest('compare-rio_m20k', attractions.rio, 5, 5),\r\n  ...diagonalizationTest('compare-rio_m20k', attractions.rio, 5, 86),\r\n\r\n  ...theHalfeningTest('compare-rome_m20k', attractions.rome, 5, 5),\r\n  ...diagonalizationTest('compare-rome_m20k', attractions.rome, 5, 93),\r\n];\r\n\r\nasyncIterate(tests, function(test, index, next) {\r\n  console.log(`${tests.length - index} tests left`);\r\n  test().then(() => {\r\n    next();\r\n  }).catch(console.error)\r\n});\r\n"]}