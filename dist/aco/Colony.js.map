{"version":3,"sources":["../../src/aco/Colony.js"],"names":["Colony","_graph","_colony","_colonySize","_alpha","_beta","_rho","_q","_initPheromone","_type","_elitistWeight","_maxIterations","_minScalingFactor","_iteration","_minPheromone","_maxPheromone","_iterationBest","_globalBest","_createAnts","length","antIndex","push","resetAnts","setInitialPheromone","resetPheromone","edges","getEdges","edgeIndex","size","ready","step","run","getGlobalBest","updatePheromone","best","pheromone","getPheromone","setPheromone","getIterationBest","getTour","distance","addPheromone","bestAnt"],"mappings":"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","file":"Colony.js","sourcesContent":["import Graph from './Graph';\r\nimport Ant from './Ant';\r\n\r\nclass Colony {\r\n  constructor() {\r\n    this._graph = new Graph();\r\n    this._colony = [];\r\n\r\n    // Set default params\r\n    this._colonySize = 20;\r\n    this._alpha = 1;\r\n    this._beta = 3;\r\n    this._rho = 0.1;\r\n    this._q = 1;\r\n    this._initPheromone = this._q;\r\n    this._type = 'acs';\r\n    this._elitistWeight = 0;\r\n    this._maxIterations = 250;\r\n    this._minScalingFactor = 0.001;\r\n\r\n    this._iteration = 0;\r\n    this._minPheromone = null;\r\n    this._maxPheromone = null;\r\n\r\n    this._iterationBest = null;\r\n    this._globalBest = null;\r\n\r\n    this._createAnts();\r\n  }\r\n\r\n  getGraph() {\r\n    return this._graph;\r\n  }\r\n\r\n  getAnts() {\r\n    return this._colony;\r\n  }\r\n\r\n  size() {\r\n    return this._colony.length;\r\n  }\r\n\r\n  currentIteration() {\r\n    return this._iteration;\r\n  }\r\n\r\n  maxIterations() {\r\n    return this._maxIterations;\r\n  }\r\n\r\n  _createAnts() {\r\n    this._colony = [];\r\n    for (var antIndex = 0; antIndex < this._colonySize; antIndex++) {\r\n      this._colony.push(new Ant(this._graph, {\r\n        'alpha': this._alpha,\r\n        'beta': this._beta,\r\n        'q': this._q,\r\n      }));\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this._iteration = 0;\r\n    this._globalBest = null;\r\n    this.resetAnts();\r\n    this.setInitialPheromone(this._initPheromone);\r\n    this._graph.resetPheromone();\r\n  }\r\n\r\n  setInitialPheromone() {\r\n    const edges = this._graph.getEdges();\r\n    for (var edgeIndex in edges) {\r\n      edges[edgeIndex].setInitialPheromone(this._initPheromone);\r\n    }\r\n  }\r\n\r\n  resetAnts() {\r\n    this._createAnts();\r\n    this._iterationBest = null;\r\n  }\r\n\r\n  ready() {\r\n    if (this._graph.size() <= 1) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  run() {\r\n    if (!this.ready()) {\r\n      return;\r\n    }\r\n\r\n    this._iteration = 0;\r\n    while (this._iteration < this._maxIterations) {\r\n      this.step();\r\n    }\r\n  }\r\n\r\n  step() {\r\n    if (!this.ready() || this._iteration >= this._maxIterations) {\r\n      return;\r\n    }\r\n\r\n    this.resetAnts();\r\n\r\n    for (var antIndex in this._colony) {\r\n      this._colony[antIndex].run();\r\n    }\r\n\r\n    this.getGlobalBest();\r\n    this.updatePheromone();\r\n\r\n    this._iteration++;\r\n  }\r\n\r\n  updatePheromone() {\r\n    const edges = this._graph.getEdges();\r\n    let best;\r\n\r\n    for (var edgeIndex in edges) {\r\n      const pheromone = edges[edgeIndex].getPheromone();\r\n      edges[edgeIndex].setPheromone(pheromone * (1 - this._rho));\r\n    }\r\n\r\n    if (this._type === 'maxmin') {\r\n      if ((this._iteration / this._maxIterations) > 0.75) {\r\n        best = this.getGlobalBest();\r\n      } else {\r\n        best = this.getIterationBest();\r\n      }\r\n\r\n      // Set maxmin\r\n      this._maxPheromone = this._q / best.getTour().distance();\r\n      this._minPheromone = this._maxPheromone * this._minScalingFactor;\r\n\r\n      best.addPheromone();\r\n    } else {\r\n      for (var antIndex in this._colony) {\r\n        this._colony[antIndex].addPheromone();\r\n      }\r\n    }\r\n\r\n    if (this._type === 'elitist') {\r\n      this.getGlobalBest().addPheromone(this._elitistWeight);\r\n    }\r\n\r\n    if (this._type === 'maxmin') {\r\n      for (var edgeIndex in edges) {\r\n        const pheromone = edges[edgeIndex].getPheromone();\r\n        if (pheromone > this._maxPheromone) {\r\n          edges[edgeIndex].setPheromone(this._maxPheromone);\r\n        } else if (pheromone < this._minPheromone) {\r\n          edges[edgeIndex].setPheromone(this._minPheromone);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getIterationBest() {\r\n    if (this._colony[0].getTour() === null) {\r\n      return null;\r\n    }\r\n\r\n    if (this._iterationBest === null) {\r\n      const best = this._colony[0];\r\n\r\n      for (var antIndex in this._colony) {\r\n        if (best.getTour().distance() >= this._colony[antIndex].getTour().distance()) {\r\n          this._iterationBest = this._colony[antIndex];\r\n        }\r\n      }\r\n    }\r\n\r\n    return this._iterationBest;\r\n  }\r\n\r\n  getGlobalBest() {\r\n    const bestAnt = this.getIterationBest();\r\n    if (bestAnt === null && this._globalBest === null) {\r\n      return null;\r\n    }\r\n\r\n    if (bestAnt !== null) {\r\n      if (this._globalBest === null ||\r\n          this._globalBest.getTour().distance() >= bestAnt.getTour().distance()) {\r\n        this._globalBest = bestAnt;\r\n      }\r\n    }\r\n\r\n    return this._globalBest;\r\n  }\r\n}\r\n\r\nexport default Colony;"]}