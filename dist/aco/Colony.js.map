{"version":3,"sources":["../../src/aco/Colony.js"],"names":["Colony","params","_graph","_colony","_colonySize","_alpha","_beta","_rho","_q","_initPheromone","_type","_elitistWeight","_maxIterations","_minScalingFactor","_maxDistance","_iteration","_minPheromone","_maxPheromone","_iterationBest","_globalBest","_createAnts","length","antIndex","push","resetAnts","setInitialPheromone","resetPheromone","edges","getEdges","edgeIndex","size","ready","writeWaitingPercent","p","m","clearLine","process","stdout","cursorTo","write","times","start","Date","getTime","step","end","averageTimePerIteration","reduce","a","b","timeLeft","percentage","Math","round","minutes","toFixed","console","log","run","getGlobalBest","updatePheromone","best","pheromone","getPheromone","setPheromone","getIterationBest","getTour","distance","addPheromone","bestIndex","bestValue","value","bestAnt"],"mappings":"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","file":"Colony.js","sourcesContent":["import readline from 'readline';\r\nimport Graph from './Graph';\r\nimport Ant from './Ant';\r\n\r\nclass Colony {\r\n  constructor(params) {\r\n    this._graph = new Graph();\r\n    this._colony = [];\r\n\r\n    // Set default params\r\n    this._colonySize = params && params['colonySize'] ? params['colonySize'] : 30;\r\n    this._alpha = params && params['alpha'] ? params['alpha'] : 1;\r\n    this._beta = params && params['beta'] ? params['beta'] : 3;\r\n    this._rho = params && params['rho'] ? params['rho'] : 0.1;\r\n    this._q = params && params['q'] ? params['q'] : 1;\r\n    this._initPheromone = params && params['initPheromone'] ? params['initPheromone'] : this._q;\r\n    this._type = 'maxmin'; //acs\r\n    this._elitistWeight = params && params['elitistWeight'] ? params['elitistWeight'] : 0;\r\n    this._maxIterations = params && params['maxIterations'] ? params['maxIterations'] : 200;\r\n    this._minScalingFactor = params && params['minScalingFactor'] ?params['minScalingFactor'] :0.001;\r\n    this._maxDistance = params && params['maxDistance'] ?params['maxDistance'] : 30000;\r\n\r\n    this._iteration = 0;\r\n    this._minPheromone = null;\r\n    this._maxPheromone = null;\r\n\r\n    this._iterationBest = null;\r\n    this._globalBest = null;\r\n\r\n    this._createAnts();\r\n  }\r\n\r\n  getGraph() {\r\n    return this._graph;\r\n  }\r\n\r\n  getAnts() {\r\n    return this._colony;\r\n  }\r\n\r\n  size() {\r\n    return this._colony.length;\r\n  }\r\n\r\n  currentIteration() {\r\n    return this._iteration;\r\n  }\r\n\r\n  maxIterations() {\r\n    return this._maxIterations;\r\n  }\r\n\r\n  _createAnts() {\r\n    this._colony = [];\r\n    for (var antIndex = 0; antIndex < this._colonySize; antIndex++) {\r\n      this._colony.push(new Ant(this._graph, {\r\n        'alpha': this._alpha,\r\n        'beta': this._beta,\r\n        'q': this._q,\r\n        'maxDistance': this._maxDistance,\r\n      }));\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this._iteration = 0;\r\n    this._globalBest = null;\r\n    this.resetAnts();\r\n    this.setInitialPheromone(this._initPheromone);\r\n    this._graph.resetPheromone();\r\n  }\r\n\r\n  setInitialPheromone() {\r\n    const edges = this._graph.getEdges();\r\n    for (var edgeIndex in edges) {\r\n      edges[edgeIndex].setInitialPheromone(this._initPheromone);\r\n    }\r\n  }\r\n\r\n  resetAnts() {\r\n    this._createAnts();\r\n    this._iterationBest = null;\r\n  }\r\n\r\n  ready() {\r\n    return this._graph.size() > 1;\r\n  }\r\n\r\n  run() {\r\n    if (!this.ready()) {\r\n      return;\r\n    }\r\n\r\n    this._iteration = 0;\r\n\r\n    function writeWaitingPercent(p, m) {\r\n      readline.clearLine(process.stdout);\r\n      readline.cursorTo(process.stdout, 0);\r\n      process.stdout.write(`running ${p}% - ${m} minutes left. `);\r\n    }\r\n\r\n    let times = [];\r\n\r\n    while (this._iteration < this._maxIterations) {\r\n      var start = new Date().getTime();\r\n      this.step();\r\n      var end = new Date().getTime();\r\n      times.push(end - start);\r\n\r\n      let averageTimePerIteration = times.reduce((a, b) => a + b) / times.length;\r\n      let timeLeft = (this._maxIterations - this._iteration) * averageTimePerIteration;\r\n      let percentage = Math.round((this._iteration / this._maxIterations) * 100);\r\n      let minutes = ((timeLeft / 1000) / 60).toFixed(2);\r\n\r\n      writeWaitingPercent(percentage, minutes);\r\n    }\r\n    console.log('');\r\n  }\r\n\r\n  step() {\r\n    if (!this.ready() || this._iteration >= this._maxIterations) {\r\n      return;\r\n    }\r\n\r\n    this.resetAnts();\r\n\r\n    for (var antIndex in this._colony) {\r\n      this._colony[antIndex].run();\r\n    }\r\n\r\n    this.getGlobalBest();\r\n    this.updatePheromone();\r\n\r\n    this._iteration++;\r\n  }\r\n\r\n  updatePheromone() {\r\n    const edges = this._graph.getEdges();\r\n    let best;\r\n\r\n    for (var edgeIndex in edges) {\r\n      const pheromone = edges[edgeIndex].getPheromone();\r\n      edges[edgeIndex].setPheromone(pheromone * (1 - this._rho));\r\n    }\r\n\r\n    if (this._type == 'maxmin') {\r\n      if ((this._iteration / this._maxIterations) > 0.75) { //0.75\r\n        best = this.getGlobalBest();\r\n      } else {\r\n        best = this.getIterationBest();\r\n      }\r\n\r\n      // Set maxmin\r\n      this._maxPheromone = this._q / best.getTour().distance();\r\n      this._minPheromone = this._maxPheromone * this._minScalingFactor;\r\n\r\n      best.addPheromone();\r\n    } else {\r\n      for (var antIndex in this._colony) {\r\n        this._colony[antIndex].addPheromone();\r\n      }\r\n    }\r\n\r\n    if (this._type == 'elitist') {\r\n      this.getGlobalBest().addPheromone(this._elitistWeight);\r\n    }\r\n\r\n    if (this._type == 'maxmin') {\r\n      for (var edgeIndex in edges) {\r\n        const pheromone = edges[edgeIndex].getPheromone();\r\n        if (pheromone > this._maxPheromone) {\r\n          edges[edgeIndex].setPheromone(this._maxPheromone);\r\n        } else if (pheromone < this._minPheromone) {\r\n          edges[edgeIndex].setPheromone(this._minPheromone);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getIterationBest() {\r\n    if (this._colony[0].getTour() == null) {\r\n      return null;\r\n    }\r\n\r\n    if (this._iterationBest == null) {\r\n      let bestIndex = 0;\r\n      let bestValue = this._colony[bestIndex].getTour().value;\r\n\r\n      for (var antIndex in this._colony) {\r\n        const value = this._colony[antIndex].getTour().value;\r\n        if (value > bestValue) {\r\n          bestIndex = antIndex;\r\n          bestValue = value;\r\n        }\r\n      }\r\n\r\n      this._iterationBest = this._colony[bestIndex];\r\n    }\r\n\r\n    return this._iterationBest;\r\n  }\r\n\r\n  getGlobalBest() {\r\n    const bestAnt = this.getIterationBest();\r\n    if (bestAnt == null && this._globalBest == null) {\r\n      return null;\r\n    }\r\n\r\n    if (bestAnt != null) {\r\n      if (this._globalBest == null ||\r\n          this._globalBest.getTour().value >= bestAnt.getTour().value) {\r\n        this._globalBest = bestAnt;\r\n      }\r\n    }\r\n\r\n    return this._globalBest;\r\n  }\r\n}\r\n\r\nexport default Colony;"]}