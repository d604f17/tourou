{"version":3,"sources":["../../src/aco/halfnhalf.js"],"names":["util","require","halfnhalf","iterations","maxDistance","waypoints","Promise","count","bestRoute","bestRouteDistance","Number","MIN_SAFE_INTEGER","loop","min","max","then","route","boxes","coordinates","_tour","map","vertex","y","x","query","mode","origin","shift","destination","pop","join","legs","result","routes","distances","leg","distance","value","_realDistance","reduce","a","b","length","localMin","localMax","Math","round","catch","console","error","resolve"],"mappings":";;;;;;AAEA;;AACA;;;;AACA;;;;;;AAJA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAMA,IAAMC,YAAY,SAAZA,SAAY,CAACC,UAAD,EAAaC,WAAb,EAA0BC,SAA1B,EAAwC;AACxD,SAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5B,QAAIC,QAAQ,CAAZ;AACA,QAAIC,kBAAJ;AACA,QAAIC,oBAAoBC,OAAOC,gBAA/B;;AAEA,KAAC,SAASC,IAAT,CAAcC,GAAd,EAAmBC,GAAnB,EAAwB;AACvB,UAAIP,QAAQJ,UAAZ,EAAwB;AACtB,UAAEI,KAAF;;AAEA,wBAAIF,SAAJ,EAAeU,IAAf,CAAoB,iBAAS;AAC3B,cAAMC,QAAQ,oBAAKX,SAAL,EAAgBY,KAAhB,EAAuB,EAACb,wBAAD,EAAvB,CAAd;;AAEA,cAAMc,cAAcF,MAAMG,KAAN,CAAYC,GAAZ,CAAgB,kBAAU;AAC5C,mBAAOC,OAAOC,CAAP,GAAW,GAAX,GAAiBD,OAAOE,CAA/B;AACD,WAFmB,CAApB;;AAIA,+BAAWC,KAAX,CAAiB;AACfC,kBAAM,SADS;AAEfC,oBAAQR,YAAYS,KAAZ,EAFO;AAGfC,yBAAaV,YAAYW,GAAZ,EAHE;AAIfxB,uBAAWa,YAAYY,IAAZ,CAAiB,GAAjB;AAJI,WAAjB,EAKGf,IALH,CAKQ,kBAAU;AAChB,gBAAIgB,OAAOC,OAAOC,MAAP,CAAc,CAAd,EAAiBF,IAA5B;AACA,gBAAIG,YAAYH,KAAKX,GAAL,CAAS;AAAA,qBAAOe,IAAIC,QAAJ,CAAaC,KAApB;AAAA,aAAT,CAAhB;AACArB,kBAAMsB,aAAN,GAAsBJ,UAAUK,MAAV,CAAiB,UAACC,CAAD,EAAIC,CAAJ;AAAA,qBAAUD,IAAIC,CAAd;AAAA,aAAjB,CAAtB;AACAzB,kBAAMsB,aAAN,IAAuB,QAAQP,KAAKW,MAAL,GAAc,CAAtB,CAAvB;;AAEA,gBAAIC,WAAW9B,GAAf;AAAA,gBAAoB+B,WAAW9B,GAA/B;;AAEA,gBAAI+B,KAAKC,KAAL,CAAWjC,GAAX,MAAoBgC,KAAKC,KAAL,CAAWhC,GAAX,CAAxB,EAAyC;AACvCP,sBAAQJ,UAAR;AACAK,0BAAYQ,KAAZ;AACAP,kCAAoBO,MAAMsB,aAA1B;AACD,aAJD,MAIO,IAAItB,MAAMsB,aAAN,GAAsBlC,WAA1B,EAAuC;AAC5CwC,yBAAW/B,MAAM,CAACC,MAAMD,GAAP,IAAc,CAA/B;AACD,aAFM,MAEA,IAAIG,MAAMsB,aAAN,GAAsBlC,WAA1B,EAAuC;AAC5C,kBAAIY,MAAMsB,aAAN,GAAsB7B,iBAA1B,EAA6C;AAC3CD,4BAAYQ,KAAZ;AACAP,oCAAoBO,MAAMsB,aAA1B;AACD;AACDK,yBAAW7B,GAAX;AACA8B,yBAAW9B,MAAM,CAACA,MAAMD,GAAP,IAAc,CAA/B;AACD,aAPM,MAOA;AACLN,sBAAQJ,UAAR;AACAK,0BAAYQ,KAAZ;AACAP,kCAAoBO,MAAMsB,aAA1B;AACD;AACD1B,iBAAK+B,QAAL,EAAeC,QAAf;AACD,WAhCD;AAiCD,SAxCD,EAwCGG,KAxCH,CAwCSC,QAAQC,KAxCjB;AAyCD,OA5CD,MA4CO;AACLC,gBAAQ1C,SAAR;AACD;AACF,KAhDD,EAgDG,CAhDH,EAgDMJ,WAhDN;AAiDD,GAtDM,CAAP;AAuDD,CAxDD;;kBA0DeF,S","file":"halfnhalf.js","sourcesContent":["const util = require('util');\r\n\r\nimport {one} from '../strategies/index';\r\nimport mmas from './mmas';\r\nimport directions from '../directions';\r\n\r\nconst halfnhalf = (iterations, maxDistance, waypoints) => {\r\n  return new Promise(resolve => {\r\n    let count = 0;\r\n    let bestRoute;\r\n    let bestRouteDistance = Number.MIN_SAFE_INTEGER;\r\n\r\n    (function loop(min, max) {\r\n      if (count < iterations) {\r\n        ++count;\r\n\r\n        one(waypoints).then(boxes => {\r\n          const route = mmas(waypoints, boxes, {maxDistance});\r\n\r\n          const coordinates = route._tour.map(vertex => {\r\n            return vertex.y + ',' + vertex.x;\r\n          });\r\n\r\n          directions.query({\r\n            mode: 'walking',\r\n            origin: coordinates.shift(),\r\n            destination: coordinates.pop(),\r\n            waypoints: coordinates.join('|'),\r\n          }).then(result => {\r\n            let legs = result.routes[0].legs;\r\n            let distances = legs.map(leg => leg.distance.value);\r\n            route._realDistance = distances.reduce((a, b) => a + b);\r\n            route._realDistance += 2500 * (legs.length - 2);\r\n\r\n            let localMin = min, localMax = max;\r\n\r\n            if (Math.round(min) === Math.round(max)) {\r\n              count = iterations;\r\n              bestRoute = route;\r\n              bestRouteDistance = route._realDistance;\r\n            } else if (route._realDistance > maxDistance) {\r\n              localMax = min + (max - min) / 2;\r\n            } else if (route._realDistance < maxDistance) {\r\n              if (route._realDistance > bestRouteDistance) {\r\n                bestRoute = route;\r\n                bestRouteDistance = route._realDistance;\r\n              }\r\n              localMin = max;\r\n              localMax = max + (max - min) / 2;\r\n            } else {\r\n              count = iterations;\r\n              bestRoute = route;\r\n              bestRouteDistance = route._realDistance;\r\n            }\r\n            loop(localMin, localMax);\r\n          });\r\n        }).catch(console.error);\r\n      } else {\r\n        resolve(bestRoute);\r\n      }\r\n    })(0, maxDistance);\r\n  });\r\n};\r\n\r\nexport default halfnhalf;\r\n"]}