{"version":3,"sources":["../../src/aco/Graph.js"],"names":["Graph","_vertices","_edges","Object","keys","length","vertexIndex","x","y","value","push","vertexA","vertexB","boxes","toString","undefined","connectionIndex","_addEdge","edgeIndex","resetPheromone"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEMA,K;AACJ,mBAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;;;+BAEU;AACT,aAAO,KAAKA,MAAZ;AACD;;;mCAEc;AACb,aAAOC,OAAOC,IAAP,CAAY,KAAKF,MAAjB,EAAyBG,MAAhC;AACD;;;8BAESC,W,EAAa;AACrB,aAAO,KAAKL,SAAL,CAAeK,WAAf,CAAP;AACD;;;kCAEa;AACZ,aAAO,KAAKL,SAAZ;AACD;;;2BAEM;AACL,aAAO,KAAKA,SAAL,CAAeI,MAAtB;AACD;;;8BAESE,C,EAAGC,C,EAAGC,K,EAAO;AACrB,WAAKR,SAAL,CAAeS,IAAf,CAAoB,qBAAWH,CAAX,EAAcC,CAAd,EAAiBC,KAAjB,CAApB;AACD;;;6BAEQE,O,EAASC,O,EAASC,K,EAAO;AAChC,WAAKX,MAAL,CAAYS,QAAQG,QAAR,KAAqB,GAArB,GAA2BF,QAAQE,QAAR,EAAvC,IAA6D,mBAASH,OAAT,EAAkBC,OAAlB,EAA2BC,KAA3B,CAA7D;AACD;;;4BAEOF,O,EAASC,O,EAAS;AACxB,UAAI,KAAKV,MAAL,CAAYS,QAAQG,QAAR,KAAqB,GAArB,GAA2BF,QAAQE,QAAR,EAAvC,KAA8DC,SAAlE,EAA6E;AAC3E,eAAO,KAAKb,MAAL,CAAYS,QAAQG,QAAR,KAAqB,GAArB,GAA2BF,QAAQE,QAAR,EAAvC,CAAP;AACD;AACD,UAAI,KAAKZ,MAAL,CAAYU,QAAQE,QAAR,KAAqB,GAArB,GAA2BH,QAAQG,QAAR,EAAvC,KAA8DC,SAAlE,EAA6E;AAC3E,eAAO,KAAKb,MAAL,CAAYU,QAAQE,QAAR,KAAqB,GAArB,GAA2BH,QAAQG,QAAR,EAAvC,CAAP;AACD;AACF;;;gCAEWD,K,EAAO;AACjB,WAAKX,MAAL,GAAc,EAAd;;AAEA,WAAK,IAAII,cAAc,CAAvB,EAA0BA,cAAc,KAAKL,SAAL,CAAeI,MAAvD,EAA+DC,aAA/D,EAA8E;AAC5E,aAAK,IAAIU,kBAAkBV,WAA3B,EAAwCU,kBACxC,KAAKf,SAAL,CAAeI,MADf,EACuBW,iBADvB,EAC0C;AACxC,eAAKC,QAAL,CAAc,KAAKhB,SAAL,CAAeK,WAAf,CAAd,EAA2C,KAAKL,SAAL,CAAee,eAAf,CAA3C,EAA4EH,KAA5E;AACD;AACF;AACF;;;qCAEgB;AACf,WAAK,IAAIK,SAAT,IAAsB,KAAKhB,MAA3B,EAAmC;AACjC,aAAKA,MAAL,CAAYgB,SAAZ,EAAuBC,cAAvB;AACD;AACF;;;;;;kBAGYnB,K","file":"Graph.js","sourcesContent":["import Vertex from './Vertex';\r\nimport Edge from './Edge';\r\n\r\nclass Graph {\r\n  constructor() {\r\n    this._vertices = [];\r\n    this._edges = {};\r\n  }\r\n\r\n  getEdges() {\r\n    return this._edges;\r\n  }\r\n\r\n  getEdgeCount() {\r\n    return Object.keys(this._edges).length;\r\n  }\r\n\r\n  getVertex(vertexIndex) {\r\n    return this._vertices[vertexIndex];\r\n  }\r\n\r\n  getVertices() {\r\n    return this._vertices;\r\n  }\r\n\r\n  size() {\r\n    return this._vertices.length;\r\n  }\r\n\r\n  addVertex(x, y, value) {\r\n    this._vertices.push(new Vertex(x, y, value));\r\n  }\r\n\r\n  _addEdge(vertexA, vertexB, boxes) {\r\n    this._edges[vertexA.toString() + '-' + vertexB.toString()] = new Edge(vertexA, vertexB, boxes);\r\n  }\r\n\r\n  getEdge(vertexA, vertexB) {\r\n    if (this._edges[vertexA.toString() + '-' + vertexB.toString()] != undefined) {\r\n      return this._edges[vertexA.toString() + '-' + vertexB.toString()];\r\n    }\r\n    if (this._edges[vertexB.toString() + '-' + vertexA.toString()] != undefined) {\r\n      return this._edges[vertexB.toString() + '-' + vertexA.toString()];\r\n    }\r\n  }\r\n\r\n  createEdges(boxes) {\r\n    this._edges = {};\r\n\r\n    for (var vertexIndex = 0; vertexIndex < this._vertices.length; vertexIndex++) {\r\n      for (var connectionIndex = vertexIndex; connectionIndex <\r\n      this._vertices.length; connectionIndex++) {\r\n        this._addEdge(this._vertices[vertexIndex], this._vertices[connectionIndex], boxes);\r\n      }\r\n    }\r\n  }\r\n\r\n  resetPheromone() {\r\n    for (var edgeIndex in this._edges) {\r\n      this._edges[edgeIndex].resetPheromone();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Graph;"]}