{"version":3,"sources":["../../src/aco/Ant.js"],"names":["Ant","graph","params","_graph","_alpha","alpha","_beta","beta","_q","q","_maxDistance","maxDistance","_tour","_currentVertex","getVertex","addVertex","init","rouletteWheel","vertices","getVertices","vertexProbabilities","finalPheromoneWeight","forwardMovePossible","vertexIndex","vertex","edgeForwardDistance","getEdge","getLast","getDistance","edgeHomeDistance","contains","distance","edge","getPheromone","Math","pow","wheelTarget","random","wheelPosition","isEqual","getTour","reset","tourFound","makeNextMove","weight","fromVertex","toVertex","pheromone","undefined","extraPheromone","tourIndex","size","get","setPheromone"],"mappings":"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","file":"Ant.js","sourcesContent":["import Tour from './Tour';\r\n\r\nclass Ant {\r\n  constructor(graph, params) {\r\n    this._graph = graph;\r\n\r\n    this._alpha = params.alpha;\r\n    this._beta = params.beta;\r\n    this._q = params.q;\r\n    this._maxDistance = params.maxDistance;\r\n    this._tour = null;\r\n  }\r\n\r\n  reset() {\r\n    this._tour = null;\r\n  }\r\n\r\n  init() {\r\n    this._tour = new Tour(this._graph);\r\n    this._currentVertex = this._graph.getVertex(0);\r\n    this._tour.addVertex(this._currentVertex);\r\n  }\r\n\r\n  getTour() {\r\n    return this._tour;\r\n  }\r\n\r\n  makeNextMove() {\r\n    if (this._tour == null) {\r\n      this.init();\r\n    }\r\n\r\n    let rouletteWheel = 0.0;\r\n    const vertices = this._graph.getVertices();\r\n\r\n    let vertexProbabilities = [];\r\n    let finalPheromoneWeight;\r\n    let forwardMovePossible = false;\r\n\r\n    for (var vertexIndex in vertices) {\r\n      const vertex = vertices[vertexIndex];\r\n      const edgeForwardDistance = this._graph.getEdge(this._tour.getLast(), vertex).getDistance();\r\n      const edgeHomeDistance = this._graph.getEdge(vertex, vertices[0]).getDistance();\r\n\r\n      // console.log(vertex, this._tour._tour, this._tour.distance(), edgeForwardDistance,edgeHomeDistance);\r\n\r\n      if ((!this._tour.contains(vertices[vertexIndex]) &&\r\n          (this._maxDistance >= this._tour.distance() + edgeForwardDistance + edgeHomeDistance))) {\r\n\r\n        let edge = this._graph.getEdge(this._currentVertex, vertices[vertexIndex]);\r\n        if (this._alpha == 1) {\r\n          finalPheromoneWeight = edge.getPheromone();\r\n        } else {\r\n          finalPheromoneWeight = Math.pow(edge.getPheromone(), this._alpha);\r\n        }\r\n        vertexProbabilities[vertexIndex] = finalPheromoneWeight *\r\n            Math.pow(1.0 / edge.getDistance(), this._beta);\r\n        rouletteWheel += vertexProbabilities[vertexIndex];\r\n        forwardMovePossible = true;\r\n      }\r\n    }\r\n\r\n    if (forwardMovePossible) {\r\n      const wheelTarget = rouletteWheel * Math.random();\r\n\r\n      let wheelPosition = 0.0;\r\n      for (var vertexIndex in vertices) {\r\n        if (!this._tour.contains(vertices[vertexIndex])) {\r\n          wheelPosition += vertexProbabilities[vertexIndex];\r\n          if (wheelPosition >= wheelTarget) {\r\n            this._currentVertex = vertices[vertexIndex];\r\n            this._tour.addVertex(vertices[vertexIndex]);\r\n            forwardMovePossible = false;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this._currentVertex = vertices[0];\r\n      this._tour.addVertex(vertices[0]);\r\n    }\r\n  }\r\n\r\n  tourFound() {\r\n    if (this._tour == null) {\r\n      return false;\r\n    }\r\n\r\n    //console.log(this._graph.getVertices()[0].isEqual(this.getTour().getLast()));\r\n    return this._graph.getVertices()[0].isEqual(this.getTour().getLast());\r\n    // return (this._tour.size() >= this._graph.size());\r\n  }\r\n\r\n  run() {\r\n    this.reset();\r\n    while (!this.tourFound()) {\r\n      this.makeNextMove();\r\n    }\r\n  }\r\n\r\n  addPheromone(weight) {\r\n    let fromVertex, toVertex, edge, pheromone;\r\n\r\n    if (weight == undefined) {\r\n      weight = 1;\r\n    }\r\n\r\n    const extraPheromone = (this._q * weight) / this._tour.distance();\r\n    for (var tourIndex = 0; tourIndex < this._tour.size(); tourIndex++) {\r\n      if (tourIndex >= this._tour.size() - 1) {\r\n        fromVertex = this._tour.get(tourIndex);\r\n        toVertex = this._tour.get(0);\r\n        edge = this._graph.getEdge(fromVertex, toVertex);\r\n        pheromone = edge.getPheromone();\r\n        edge.setPheromone(pheromone + extraPheromone);\r\n      } else {\r\n        fromVertex = this._tour.get(tourIndex);\r\n        toVertex = this._tour.get(tourIndex + 1);\r\n        edge = this._graph.getEdge(fromVertex, toVertex);\r\n        pheromone = edge.getPheromone();\r\n        edge.setPheromone(pheromone + extraPheromone);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Ant;"]}