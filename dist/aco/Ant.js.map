{"version":3,"sources":["../../src/aco/Ant.js"],"names":["Ant","graph","params","_graph","_alpha","alpha","_beta","beta","_q","q","_maxDistance","maxDistance","_tour","_currentVertex","getVertex","addVertex","init","rouletteWheel","vertices","getVertices","vertexProbabilities","finalPheromoneWeight","vertexIndex","edgeForwardDistance","getEdge","getLast","getDistance","edgeHomeDistance","size","contains","distance","edge","getPheromone","Math","pow","wheelTarget","random","wheelPosition","isEqual","getTour","reset","tourFound","makeNextMove","weight","fromVertex","toVertex","pheromone","undefined","extraPheromone","tourIndex","get","setPheromone"],"mappings":"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","file":"Ant.js","sourcesContent":["import Tour from './Tour';\r\n\r\nclass Ant {\r\n  constructor(graph, params) {\r\n    this._graph = graph;\r\n\r\n    this._alpha = params.alpha;\r\n    this._beta = params.beta;\r\n    this._q = params.q;\r\n    this._maxDistance = params.maxDistance;\r\n    this._tour = null;\r\n  }\r\n\r\n  reset() {\r\n    this._tour = null;\r\n  }\r\n\r\n  init() {\r\n    this._tour = new Tour(this._graph);\r\n    this._currentVertex = this._graph.getVertex(0);\r\n    this._tour.addVertex(this._currentVertex);\r\n  }\r\n\r\n  getTour() {\r\n    return this._tour;\r\n  }\r\n\r\n  makeNextMove() {\r\n    if (this._tour == null) {\r\n      this.init();\r\n    }\r\n\r\n    let rouletteWheel = 0.0;\r\n    const vertices = this._graph.getVertices();\r\n\r\n    let vertexProbabilities = [];\r\n    let finalPheromoneWeight;\r\n    for (var vertexIndex in vertices) {\r\n      let edgeForwardDistance = this._graph.getEdge(this._tour.getLast(), vertices[vertexIndex]).getDistance();\r\n      let edgeHomeDistance = this._graph.getEdge(vertices[vertexIndex], vertices[0]).getDistance();\r\n      if ((vertexIndex == 0 && this._tour.size() > 1) ||\r\n          (!this._tour.contains(vertices[vertexIndex]) &&\r\n          (this._maxDistance >= this._tour.distance() + edgeForwardDistance + edgeHomeDistance))) {\r\n        let edge = this._graph.getEdge(this._currentVertex, vertices[vertexIndex]);\r\n        if (this._alpha == 1) {\r\n          finalPheromoneWeight = edge.getPheromone();\r\n        } else {\r\n          finalPheromoneWeight = Math.pow(edge.getPheromone(), this._alpha);\r\n        }\r\n        vertexProbabilities[vertexIndex] = finalPheromoneWeight *\r\n            Math.pow(1.0 / edge.getDistance(), this._beta);\r\n        rouletteWheel += vertexProbabilities[vertexIndex];\r\n      }\r\n    }\r\n\r\n    const wheelTarget = rouletteWheel * Math.random();\r\n\r\n    let wheelPosition = 0.0;\r\n    for (var vertexIndex in vertices) {\r\n      if ((vertexIndex == 0 && this._tour.size() > 1) ||\r\n          !this._tour.contains(vertices[vertexIndex])) {\r\n        wheelPosition += vertexProbabilities[vertexIndex];\r\n        if (wheelPosition >= wheelTarget) {\r\n          this._currentVertex = vertices[vertexIndex];\r\n          this._tour.addVertex(vertices[vertexIndex]);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  tourFound() {\r\n    if (this._tour == null) {\r\n      return false;\r\n    }\r\n\r\n    //console.log(this._graph.getVertices()[0].isEqual(this.getTour().getLast()));\r\n    return this._graph.getVertices()[0].isEqual(this.getTour().getLast());\r\n    // return (this._tour.size() >= this._graph.size());\r\n  }\r\n\r\n  run() {\r\n    this.reset();\r\n    while (!this.tourFound()) {\r\n      this.makeNextMove();\r\n    }\r\n  }\r\n\r\n  addPheromone(weight) {\r\n    let fromVertex, toVertex, edge, pheromone;\r\n\r\n    if (weight == undefined) {\r\n      weight = 1;\r\n    }\r\n\r\n    const extraPheromone = (this._q * weight) / this._tour.distance(); // TODO distance/value\r\n    for (var tourIndex = 0; tourIndex < this._tour.size(); tourIndex++) {\r\n      if (tourIndex >= this._tour.size() - 1) {\r\n        fromVertex = this._tour.get(tourIndex);\r\n        toVertex = this._tour.get(0);\r\n        edge = this._graph.getEdge(fromVertex, toVertex);\r\n        pheromone = edge.getPheromone();\r\n        edge.setPheromone(pheromone + extraPheromone);\r\n      } else {\r\n        fromVertex = this._tour.get(tourIndex);\r\n        toVertex = this._tour.get(tourIndex + 1);\r\n        edge = this._graph.getEdge(fromVertex, toVertex);\r\n        pheromone = edge.getPheromone();\r\n        edge.setPheromone(pheromone + extraPheromone);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Ant;"]}