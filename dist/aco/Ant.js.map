{"version":3,"sources":["../../src/aco/Ant.js"],"names":["Ant","graph","params","_graph","_alpha","alpha","_beta","beta","_q","q","_tour","randVertexIndex","Math","floor","random","size","_currentVertex","getVertex","addVertex","init","rouletteWheel","vertices","getVertices","vertexProbabilities","finalPheromoneWeight","vertexIndex","contains","edge","getEdge","getPheromone","pow","getDistance","wheelTarget","wheelPosition","reset","tourFound","makeNextMove","weight","fromVertex","toVertex","pheromone","undefined","extraPheromone","distance","tourIndex","get","setPheromone"],"mappings":"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","file":"Ant.js","sourcesContent":["import Tour from './Tour';\r\n\r\nclass Ant {\r\n  constructor(graph, params) {\r\n    this._graph = graph;\r\n\r\n    this._alpha = params.alpha;\r\n    this._beta = params.beta;\r\n    this._q = params.q;\r\n    this._tour = null;\r\n  }\r\n\r\n  reset() {\r\n    this._tour = null;\r\n  }\r\n\r\n  init() {\r\n    this._tour = new Tour(this._graph);\r\n    const randVertexIndex = Math.floor(Math.random() * this._graph.size());\r\n    this._currentVertex = this._graph.getVertex(randVertexIndex);\r\n    this._tour.addVertex(this._currentVertex);\r\n  }\r\n\r\n  getTour() {\r\n    return this._tour;\r\n  }\r\n\r\n  makeNextMove() {\r\n    if (this._tour === null) {\r\n      this.init();\r\n    }\r\n\r\n    let rouletteWheel = 0.0;\r\n    const vertices = this._graph.getVertices();\r\n\r\n    let vertexProbabilities = [];\r\n    let finalPheromoneWeight;\r\n    for (var vertexIndex in vertices) {\r\n      if (!this._tour.contains(vertices[vertexIndex])) {\r\n        let edge = this._graph.getEdge(this._currentVertex, vertices[vertexIndex]);\r\n        if (this._alpha === 1) {\r\n          finalPheromoneWeight = edge.getPheromone();\r\n        } else {\r\n          finalPheromoneWeight = Math.pow(edge.getPheromone(), this._alpha);\r\n        }\r\n        vertexProbabilities[vertexIndex] = finalPheromoneWeight *\r\n            Math.pow(1.0 / edge.getDistance(), this._beta);\r\n        rouletteWheel += vertexProbabilities[vertexIndex];\r\n      }\r\n    }\r\n\r\n    const wheelTarget = rouletteWheel * Math.random();\r\n\r\n    let wheelPosition = 0.0;\r\n    for (var vertexIndex in vertices) {\r\n      if (!this._tour.contains(vertices[vertexIndex])) {\r\n        wheelPosition += vertexProbabilities[vertexIndex];\r\n        if (wheelPosition >= wheelTarget) {\r\n          this._currentVertex = vertices[vertexIndex];\r\n          this._tour.addVertex(vertices[vertexIndex]);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  tourFound() {\r\n    if (this._tour === null) {\r\n      return false;\r\n    }\r\n\r\n    //console.log(this._graph.getVertices()[0].isEqual(this.getTour().getLast()));\r\n    // return this._graph.getVertices()[0].isEqual(this.getTour().getLast());\r\n    return (this._tour.size() >= this._graph.size());\r\n  }\r\n\r\n  run() {\r\n    this.reset();\r\n    while (!this.tourFound()) {\r\n      this.makeNextMove();\r\n    }\r\n  }\r\n\r\n  addPheromone(weight) {\r\n    let fromVertex, toVertex, edge, pheromone;\r\n\r\n    if (weight === undefined) {\r\n      weight = 1;\r\n    }\r\n\r\n    const extraPheromone = (this._q * weight) / this._tour.distance();\r\n    for (var tourIndex = 0; tourIndex < this._tour.size(); tourIndex++) {\r\n      if (tourIndex >= this._tour.size() - 1) {\r\n        fromVertex = this._tour.get(tourIndex);\r\n        toVertex = this._tour.get(0);\r\n        edge = this._graph.getEdge(fromVertex, toVertex);\r\n        pheromone = edge.getPheromone();\r\n        edge.setPheromone(pheromone + extraPheromone);\r\n      } else {\r\n        fromVertex = this._tour.get(tourIndex);\r\n        toVertex = this._tour.get(tourIndex + 1);\r\n        edge = this._graph.getEdge(fromVertex, toVertex);\r\n        pheromone = edge.getPheromone();\r\n        edge.setPheromone(pheromone + extraPheromone);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Ant;"]}